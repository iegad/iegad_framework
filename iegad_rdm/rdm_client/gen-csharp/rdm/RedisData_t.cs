/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace rdm
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RedisData_t : TBase
  {
    private string _str_value;
    private List<string> _lzs_value;
    private Dictionary<string, string> _hash_value;

    public string Type { get; set; }

    public string Key { get; set; }

    public string Str_value
    {
      get
      {
        return _str_value;
      }
      set
      {
        __isset.str_value = true;
        this._str_value = value;
      }
    }

    public List<string> Lzs_value
    {
      get
      {
        return _lzs_value;
      }
      set
      {
        __isset.lzs_value = true;
        this._lzs_value = value;
      }
    }

    public Dictionary<string, string> Hash_value
    {
      get
      {
        return _hash_value;
      }
      set
      {
        __isset.hash_value = true;
        this._hash_value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool str_value;
      public bool lzs_value;
      public bool hash_value;
    }

    public RedisData_t() {
    }

    public RedisData_t(string type, string key) : this() {
      this.Type = type;
      this.Key = key;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_type = false;
        bool isset_key = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Type = iprot.ReadString();
                isset_type = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
                isset_key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Str_value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Lzs_value = new List<string>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2;
                    _elem2 = iprot.ReadString();
                    Lzs_value.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Map) {
                {
                  Hash_value = new Dictionary<string, string>();
                  TMap _map3 = iprot.ReadMapBegin();
                  for( int _i4 = 0; _i4 < _map3.Count; ++_i4)
                  {
                    string _key5;
                    string _val6;
                    _key5 = iprot.ReadString();
                    _val6 = iprot.ReadString();
                    Hash_value[_key5] = _val6;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_type)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_key)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RedisData_t");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "type";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type);
        oprot.WriteFieldEnd();
        field.Name = "key";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Key);
        oprot.WriteFieldEnd();
        if (Str_value != null && __isset.str_value) {
          field.Name = "str_value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Str_value);
          oprot.WriteFieldEnd();
        }
        if (Lzs_value != null && __isset.lzs_value) {
          field.Name = "lzs_value";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Lzs_value.Count));
            foreach (string _iter7 in Lzs_value)
            {
              oprot.WriteString(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Hash_value != null && __isset.hash_value) {
          field.Name = "hash_value";
          field.Type = TType.Map;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Hash_value.Count));
            foreach (string _iter8 in Hash_value.Keys)
            {
              oprot.WriteString(_iter8);
              oprot.WriteString(Hash_value[_iter8]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RedisData_t(");
      __sb.Append(", Type: ");
      __sb.Append(Type);
      __sb.Append(", Key: ");
      __sb.Append(Key);
      if (Str_value != null && __isset.str_value) {
        __sb.Append(", Str_value: ");
        __sb.Append(Str_value);
      }
      if (Lzs_value != null && __isset.lzs_value) {
        __sb.Append(", Lzs_value: ");
        __sb.Append(Lzs_value);
      }
      if (Hash_value != null && __isset.hash_value) {
        __sb.Append(", Hash_value: ");
        __sb.Append(Hash_value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
