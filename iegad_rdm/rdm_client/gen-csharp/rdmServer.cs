/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace rdm
{
  public partial class rdmServer {
    public interface Iface {
      List<RedisData_t> GetKeys(string qurey_str);
      #if SILVERLIGHT
      IAsyncResult Begin_GetKeys(AsyncCallback callback, object state, string qurey_str);
      List<RedisData_t> End_GetKeys(IAsyncResult asyncResult);
      #endif
      RedisData_t GetValue(string _key__, string _type__);
      #if SILVERLIGHT
      IAsyncResult Begin_GetValue(AsyncCallback callback, object state, string _key__, string _type__);
      RedisData_t End_GetValue(IAsyncResult asyncResult);
      #endif
      bool Connect(string ipstr, int port, string usrid, string password);
      #if SILVERLIGHT
      IAsyncResult Begin_Connect(AsyncCallback callback, object state, string ipstr, int port, string usrid, string password);
      bool End_Connect(IAsyncResult asyncResult);
      #endif
      bool @Select(short db_index);
      #if SILVERLIGHT
      IAsyncResult Begin_Select(AsyncCallback callback, object state, short db_index);
      bool End_Select(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetKeys(AsyncCallback callback, object state, string qurey_str)
      {
        return send_GetKeys(callback, state, qurey_str);
      }

      public List<RedisData_t> End_GetKeys(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetKeys();
      }

      #endif

      public List<RedisData_t> GetKeys(string qurey_str)
      {
        #if !SILVERLIGHT
        send_GetKeys(qurey_str);
        return recv_GetKeys();

        #else
        var asyncResult = Begin_GetKeys(null, null, qurey_str);
        return End_GetKeys(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetKeys(AsyncCallback callback, object state, string qurey_str)
      #else
      public void send_GetKeys(string qurey_str)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetKeys", TMessageType.Call, seqid_));
        GetKeys_args args = new GetKeys_args();
        args.Qurey_str = qurey_str;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<RedisData_t> recv_GetKeys()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetKeys_result result = new GetKeys_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetKeys failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetValue(AsyncCallback callback, object state, string _key__, string _type__)
      {
        return send_GetValue(callback, state, _key__, _type__);
      }

      public RedisData_t End_GetValue(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetValue();
      }

      #endif

      public RedisData_t GetValue(string _key__, string _type__)
      {
        #if !SILVERLIGHT
        send_GetValue(_key__, _type__);
        return recv_GetValue();

        #else
        var asyncResult = Begin_GetValue(null, null, _key__, _type__);
        return End_GetValue(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetValue(AsyncCallback callback, object state, string _key__, string _type__)
      #else
      public void send_GetValue(string _key__, string _type__)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetValue", TMessageType.Call, seqid_));
        GetValue_args args = new GetValue_args();
        args._key__ = _key__;
        args._type__ = _type__;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RedisData_t recv_GetValue()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetValue_result result = new GetValue_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetValue failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Connect(AsyncCallback callback, object state, string ipstr, int port, string usrid, string password)
      {
        return send_Connect(callback, state, ipstr, port, usrid, password);
      }

      public bool End_Connect(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Connect();
      }

      #endif

      public bool Connect(string ipstr, int port, string usrid, string password)
      {
        #if !SILVERLIGHT
        send_Connect(ipstr, port, usrid, password);
        return recv_Connect();

        #else
        var asyncResult = Begin_Connect(null, null, ipstr, port, usrid, password);
        return End_Connect(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Connect(AsyncCallback callback, object state, string ipstr, int port, string usrid, string password)
      #else
      public void send_Connect(string ipstr, int port, string usrid, string password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Connect", TMessageType.Call, seqid_));
        Connect_args args = new Connect_args();
        args.Ipstr = ipstr;
        args.Port = port;
        args.Usrid = usrid;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Connect()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Connect_result result = new Connect_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Connect failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Select(AsyncCallback callback, object state, short db_index)
      {
        return send_Select(callback, state, db_index);
      }

      public bool End_Select(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Select();
      }

      #endif

      public bool @Select(short db_index)
      {
        #if !SILVERLIGHT
        send_Select(db_index);
        return recv_Select();

        #else
        var asyncResult = Begin_Select(null, null, db_index);
        return End_Select(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Select(AsyncCallback callback, object state, short db_index)
      #else
      public void send_Select(short db_index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Select", TMessageType.Call, seqid_));
        Select_args args = new Select_args();
        args.Db_index = db_index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Select()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Select_result result = new Select_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Select failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetKeys"] = GetKeys_Process;
        processMap_["GetValue"] = GetValue_Process;
        processMap_["Connect"] = Connect_Process;
        processMap_["Select"] = Select_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetKeys_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetKeys_args args = new GetKeys_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetKeys_result result = new GetKeys_result();
        result.Success = iface_.GetKeys(args.Qurey_str);
        oprot.WriteMessageBegin(new TMessage("GetKeys", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetValue_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetValue_args args = new GetValue_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetValue_result result = new GetValue_result();
        result.Success = iface_.GetValue(args._key__, args._type__);
        oprot.WriteMessageBegin(new TMessage("GetValue", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Connect_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Connect_args args = new Connect_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Connect_result result = new Connect_result();
        result.Success = iface_.Connect(args.Ipstr, args.Port, args.Usrid, args.Password);
        oprot.WriteMessageBegin(new TMessage("Connect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Select_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Select_args args = new Select_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Select_result result = new Select_result();
        result.Success = iface_.@Select(args.Db_index);
        oprot.WriteMessageBegin(new TMessage("Select", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetKeys_args : TBase
    {
      private string _qurey_str;

      public string Qurey_str
      {
        get
        {
          return _qurey_str;
        }
        set
        {
          __isset.qurey_str = true;
          this._qurey_str = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool qurey_str;
      }

      public GetKeys_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Qurey_str = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetKeys_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Qurey_str != null && __isset.qurey_str) {
            field.Name = "qurey_str";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Qurey_str);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetKeys_args(");
        bool __first = true;
        if (Qurey_str != null && __isset.qurey_str) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Qurey_str: ");
          __sb.Append(Qurey_str);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetKeys_result : TBase
    {
      private List<RedisData_t> _success;

      public List<RedisData_t> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetKeys_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<RedisData_t>();
                    TList _list9 = iprot.ReadListBegin();
                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                    {
                      RedisData_t _elem11;
                      _elem11 = new RedisData_t();
                      _elem11.Read(iprot);
                      Success.Add(_elem11);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetKeys_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (RedisData_t _iter12 in Success)
                {
                  _iter12.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetKeys_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetValue_args : TBase
    {
      private string __key__;
      private string __type__;

      public string _key__
      {
        get
        {
          return __key__;
        }
        set
        {
          __isset._key__ = true;
          this.__key__ = value;
        }
      }

      public string _type__
      {
        get
        {
          return __type__;
        }
        set
        {
          __isset._type__ = true;
          this.__type__ = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _key__;
        public bool _type__;
      }

      public GetValue_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _key__ = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  _type__ = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetValue_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_key__ != null && __isset._key__) {
            field.Name = "_key__";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_key__);
            oprot.WriteFieldEnd();
          }
          if (_type__ != null && __isset._type__) {
            field.Name = "_type__";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_type__);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetValue_args(");
        bool __first = true;
        if (_key__ != null && __isset._key__) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_key__: ");
          __sb.Append(_key__);
        }
        if (_type__ != null && __isset._type__) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_type__: ");
          __sb.Append(_type__);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetValue_result : TBase
    {
      private RedisData_t _success;

      public RedisData_t Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetValue_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new RedisData_t();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetValue_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetValue_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Connect_args : TBase
    {
      private string _ipstr;
      private int _port;
      private string _usrid;
      private string _password;

      public string Ipstr
      {
        get
        {
          return _ipstr;
        }
        set
        {
          __isset.ipstr = true;
          this._ipstr = value;
        }
      }

      public int Port
      {
        get
        {
          return _port;
        }
        set
        {
          __isset.port = true;
          this._port = value;
        }
      }

      public string Usrid
      {
        get
        {
          return _usrid;
        }
        set
        {
          __isset.usrid = true;
          this._usrid = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ipstr;
        public bool port;
        public bool usrid;
        public bool password;
      }

      public Connect_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Ipstr = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Port = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Usrid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Connect_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Ipstr != null && __isset.ipstr) {
            field.Name = "ipstr";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ipstr);
            oprot.WriteFieldEnd();
          }
          if (__isset.port) {
            field.Name = "port";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Port);
            oprot.WriteFieldEnd();
          }
          if (Usrid != null && __isset.usrid) {
            field.Name = "usrid";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Usrid);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Connect_args(");
        bool __first = true;
        if (Ipstr != null && __isset.ipstr) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ipstr: ");
          __sb.Append(Ipstr);
        }
        if (__isset.port) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Port: ");
          __sb.Append(Port);
        }
        if (Usrid != null && __isset.usrid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Usrid: ");
          __sb.Append(Usrid);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Connect_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Connect_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Connect_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Connect_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Select_args : TBase
    {
      private short _db_index;

      public short Db_index
      {
        get
        {
          return _db_index;
        }
        set
        {
          __isset.db_index = true;
          this._db_index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool db_index;
      }

      public Select_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I16) {
                  Db_index = iprot.ReadI16();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Select_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.db_index) {
            field.Name = "db_index";
            field.Type = TType.I16;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI16(Db_index);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Select_args(");
        bool __first = true;
        if (__isset.db_index) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Db_index: ");
          __sb.Append(Db_index);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Select_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Select_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Select_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Select_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
