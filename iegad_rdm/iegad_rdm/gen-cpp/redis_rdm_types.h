/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef redis_rdm_TYPES_H
#define redis_rdm_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace rdm {

class RedisData_t;

typedef struct _RedisData_t__isset {
  _RedisData_t__isset() : str_value(false), lzs_value(false), hash_value(false) {}
  bool str_value :1;
  bool lzs_value :1;
  bool hash_value :1;
} _RedisData_t__isset;

class RedisData_t {
 public:

  RedisData_t(const RedisData_t&);
  RedisData_t& operator=(const RedisData_t&);
  RedisData_t() : type(), key(), str_value() {
  }

  virtual ~RedisData_t() throw();
  std::string type;
  std::string key;
  std::string str_value;
  std::vector<std::string>  lzs_value;
  std::map<std::string, std::string>  hash_value;

  _RedisData_t__isset __isset;

  void __set_type(const std::string& val);

  void __set_key(const std::string& val);

  void __set_str_value(const std::string& val);

  void __set_lzs_value(const std::vector<std::string> & val);

  void __set_hash_value(const std::map<std::string, std::string> & val);

  bool operator == (const RedisData_t & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(key == rhs.key))
      return false;
    if (__isset.str_value != rhs.__isset.str_value)
      return false;
    else if (__isset.str_value && !(str_value == rhs.str_value))
      return false;
    if (__isset.lzs_value != rhs.__isset.lzs_value)
      return false;
    else if (__isset.lzs_value && !(lzs_value == rhs.lzs_value))
      return false;
    if (__isset.hash_value != rhs.__isset.hash_value)
      return false;
    else if (__isset.hash_value && !(hash_value == rhs.hash_value))
      return false;
    return true;
  }
  bool operator != (const RedisData_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RedisData_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RedisData_t &a, RedisData_t &b);

inline std::ostream& operator<<(std::ostream& out, const RedisData_t& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
