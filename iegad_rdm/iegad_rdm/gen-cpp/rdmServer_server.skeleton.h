// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.


#include "rdmServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>


using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;


using boost::shared_ptr;
using namespace  ::rdm;


namespace acl {
    class redis_client_pool;
} // namespace acl;


class rdmServerHandler : virtual public rdmServerIf {
public:
    static bool InitEvironment();
    rdmServerHandler();

    ~rdmServerHandler();

    void GetKeys(std::vector<RedisData_t> & _return, const std::string& qurey_str);
    void GetValue(RedisData_t& _return, const std::string& _key__, const std::string& _type__);
    bool Connect(const std::string& ipstr, const int32_t port, const std::string& usrid, const std::string& password);
    bool Select(const int16_t db_index);

private:
    acl::redis_client_pool * rds_clients_;
    const int max_threads_;
}; // class rdmServerHandler;

