/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "redis_rdm_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace rdm {


RedisData_t::~RedisData_t() throw() {
}


void RedisData_t::__set_type(const std::string& val) {
  this->type = val;
}

void RedisData_t::__set_key(const std::string& val) {
  this->key = val;
}

void RedisData_t::__set_str_value(const std::string& val) {
  this->str_value = val;
__isset.str_value = true;
}

void RedisData_t::__set_lzs_value(const std::vector<std::string> & val) {
  this->lzs_value = val;
__isset.lzs_value = true;
}

void RedisData_t::__set_hash_value(const std::map<std::string, std::string> & val) {
  this->hash_value = val;
__isset.hash_value = true;
}

uint32_t RedisData_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_key = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          isset_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_value);
          this->__isset.str_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lzs_value.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->lzs_value.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->lzs_value[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.lzs_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->hash_value.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _ktype6;
            ::apache::thrift::protocol::TType _vtype7;
            xfer += iprot->readMapBegin(_ktype6, _vtype7, _size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              std::string _key10;
              xfer += iprot->readString(_key10);
              std::string& _val11 = this->hash_value[_key10];
              xfer += iprot->readString(_val11);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.hash_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RedisData_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RedisData_t");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.str_value) {
    xfer += oprot->writeFieldBegin("str_value", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->str_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lzs_value) {
    xfer += oprot->writeFieldBegin("lzs_value", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->lzs_value.size()));
      std::vector<std::string> ::const_iterator _iter12;
      for (_iter12 = this->lzs_value.begin(); _iter12 != this->lzs_value.end(); ++_iter12)
      {
        xfer += oprot->writeString((*_iter12));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hash_value) {
    xfer += oprot->writeFieldBegin("hash_value", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->hash_value.size()));
      std::map<std::string, std::string> ::const_iterator _iter13;
      for (_iter13 = this->hash_value.begin(); _iter13 != this->hash_value.end(); ++_iter13)
      {
        xfer += oprot->writeString(_iter13->first);
        xfer += oprot->writeString(_iter13->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RedisData_t &a, RedisData_t &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.key, b.key);
  swap(a.str_value, b.str_value);
  swap(a.lzs_value, b.lzs_value);
  swap(a.hash_value, b.hash_value);
  swap(a.__isset, b.__isset);
}

RedisData_t::RedisData_t(const RedisData_t& other14) {
  type = other14.type;
  key = other14.key;
  str_value = other14.str_value;
  lzs_value = other14.lzs_value;
  hash_value = other14.hash_value;
  __isset = other14.__isset;
}
RedisData_t& RedisData_t::operator=(const RedisData_t& other15) {
  type = other15.type;
  key = other15.key;
  str_value = other15.str_value;
  lzs_value = other15.lzs_value;
  hash_value = other15.hash_value;
  __isset = other15.__isset;
  return *this;
}
void RedisData_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RedisData_t(";
  out << "type=" << to_string(type);
  out << ", " << "key=" << to_string(key);
  out << ", " << "str_value="; (__isset.str_value ? (out << to_string(str_value)) : (out << "<null>"));
  out << ", " << "lzs_value="; (__isset.lzs_value ? (out << to_string(lzs_value)) : (out << "<null>"));
  out << ", " << "hash_value="; (__isset.hash_value ? (out << to_string(hash_value)) : (out << "<null>"));
  out << ")";
}

} // namespace
