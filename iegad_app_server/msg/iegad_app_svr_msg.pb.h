// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iegad_app_svr_msg.proto

#ifndef PROTOBUF_iegad_5fapp_5fsvr_5fmsg_2eproto__INCLUDED
#define PROTOBUF_iegad_5fapp_5fsvr_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_iegad_5fapp_5fsvr_5fmsg_2eproto();
void protobuf_AssignDesc_iegad_5fapp_5fsvr_5fmsg_2eproto();
void protobuf_ShutdownFile_iegad_5fapp_5fsvr_5fmsg_2eproto();

class setup_msg;
class up_usrinfo_msg;

// ===================================================================

class setup_msg : public ::google::protobuf::Message {
 public:
  setup_msg();
  virtual ~setup_msg();

  setup_msg(const setup_msg& from);

  inline setup_msg& operator=(const setup_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const setup_msg& default_instance();

  void Swap(setup_msg* other);

  // implements Message ----------------------------------------------

  setup_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const setup_msg& from);
  void MergeFrom(const setup_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string log_id = 1;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 1;
  inline const ::std::string& log_id() const;
  inline void set_log_id(const ::std::string& value);
  inline void set_log_id(const char* value);
  inline void set_log_id(const char* value, size_t size);
  inline ::std::string* mutable_log_id();
  inline ::std::string* release_log_id();
  inline void set_allocated_log_id(::std::string* log_id);

  // required string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // required string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:setup_msg)
 private:
  inline void set_has_log_id();
  inline void clear_has_log_id();
  inline void set_has_pwd();
  inline void clear_has_pwd();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* log_id_;
  ::std::string* pwd_;
  ::std::string* email_;
  friend void  protobuf_AddDesc_iegad_5fapp_5fsvr_5fmsg_2eproto();
  friend void protobuf_AssignDesc_iegad_5fapp_5fsvr_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_iegad_5fapp_5fsvr_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static setup_msg* default_instance_;
};
// -------------------------------------------------------------------

class up_usrinfo_msg : public ::google::protobuf::Message {
 public:
  up_usrinfo_msg();
  virtual ~up_usrinfo_msg();

  up_usrinfo_msg(const up_usrinfo_msg& from);

  inline up_usrinfo_msg& operator=(const up_usrinfo_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const up_usrinfo_msg& default_instance();

  void Swap(up_usrinfo_msg* other);

  // implements Message ----------------------------------------------

  up_usrinfo_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const up_usrinfo_msg& from);
  void MergeFrom(const up_usrinfo_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string log_id = 1;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 1;
  inline const ::std::string& log_id() const;
  inline void set_log_id(const ::std::string& value);
  inline void set_log_id(const char* value);
  inline void set_log_id(const char* value, size_t size);
  inline ::std::string* mutable_log_id();
  inline ::std::string* release_log_id();
  inline void set_allocated_log_id(::std::string* log_id);

  // optional string nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // optional string birth = 5;
  inline bool has_birth() const;
  inline void clear_birth();
  static const int kBirthFieldNumber = 5;
  inline const ::std::string& birth() const;
  inline void set_birth(const ::std::string& value);
  inline void set_birth(const char* value);
  inline void set_birth(const char* value, size_t size);
  inline ::std::string* mutable_birth();
  inline ::std::string* release_birth();
  inline void set_allocated_birth(::std::string* birth);

  // optional string hometown = 6;
  inline bool has_hometown() const;
  inline void clear_hometown();
  static const int kHometownFieldNumber = 6;
  inline const ::std::string& hometown() const;
  inline void set_hometown(const ::std::string& value);
  inline void set_hometown(const char* value);
  inline void set_hometown(const char* value, size_t size);
  inline ::std::string* mutable_hometown();
  inline ::std::string* release_hometown();
  inline void set_allocated_hometown(::std::string* hometown);

  // optional string location = 7;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 7;
  inline const ::std::string& location() const;
  inline void set_location(const ::std::string& value);
  inline void set_location(const char* value);
  inline void set_location(const char* value, size_t size);
  inline ::std::string* mutable_location();
  inline ::std::string* release_location();
  inline void set_allocated_location(::std::string* location);

  // optional string blood = 8;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 8;
  inline const ::std::string& blood() const;
  inline void set_blood(const ::std::string& value);
  inline void set_blood(const char* value);
  inline void set_blood(const char* value, size_t size);
  inline ::std::string* mutable_blood();
  inline ::std::string* release_blood();
  inline void set_allocated_blood(::std::string* blood);

  // optional string tel = 9;
  inline bool has_tel() const;
  inline void clear_tel();
  static const int kTelFieldNumber = 9;
  inline const ::std::string& tel() const;
  inline void set_tel(const ::std::string& value);
  inline void set_tel(const char* value);
  inline void set_tel(const char* value, size_t size);
  inline ::std::string* mutable_tel();
  inline ::std::string* release_tel();
  inline void set_allocated_tel(::std::string* tel);

  // optional int32 job = 10;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 10;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // optional string school = 11;
  inline bool has_school() const;
  inline void clear_school();
  static const int kSchoolFieldNumber = 11;
  inline const ::std::string& school() const;
  inline void set_school(const ::std::string& value);
  inline void set_school(const char* value);
  inline void set_school(const char* value, size_t size);
  inline ::std::string* mutable_school();
  inline ::std::string* release_school();
  inline void set_allocated_school(::std::string* school);

  // @@protoc_insertion_point(class_scope:up_usrinfo_msg)
 private:
  inline void set_has_log_id();
  inline void clear_has_log_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_birth();
  inline void clear_has_birth();
  inline void set_has_hometown();
  inline void clear_has_hometown();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_tel();
  inline void clear_has_tel();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_school();
  inline void clear_has_school();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* log_id_;
  ::std::string* nick_name_;
  ::std::string* name_;
  ::std::string* sex_;
  ::std::string* birth_;
  ::std::string* hometown_;
  ::std::string* location_;
  ::std::string* blood_;
  ::std::string* tel_;
  ::std::string* school_;
  ::google::protobuf::int32 job_;
  friend void  protobuf_AddDesc_iegad_5fapp_5fsvr_5fmsg_2eproto();
  friend void protobuf_AssignDesc_iegad_5fapp_5fsvr_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_iegad_5fapp_5fsvr_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static up_usrinfo_msg* default_instance_;
};
// ===================================================================


// ===================================================================

// setup_msg

// required string log_id = 1;
inline bool setup_msg::has_log_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void setup_msg::set_has_log_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void setup_msg::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void setup_msg::clear_log_id() {
  if (log_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_->clear();
  }
  clear_has_log_id();
}
inline const ::std::string& setup_msg::log_id() const {
  // @@protoc_insertion_point(field_get:setup_msg.log_id)
  return *log_id_;
}
inline void setup_msg::set_log_id(const ::std::string& value) {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_ = new ::std::string;
  }
  log_id_->assign(value);
  // @@protoc_insertion_point(field_set:setup_msg.log_id)
}
inline void setup_msg::set_log_id(const char* value) {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_ = new ::std::string;
  }
  log_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:setup_msg.log_id)
}
inline void setup_msg::set_log_id(const char* value, size_t size) {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_ = new ::std::string;
  }
  log_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:setup_msg.log_id)
}
inline ::std::string* setup_msg::mutable_log_id() {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:setup_msg.log_id)
  return log_id_;
}
inline ::std::string* setup_msg::release_log_id() {
  clear_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = log_id_;
    log_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void setup_msg::set_allocated_log_id(::std::string* log_id) {
  if (log_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_id_;
  }
  if (log_id) {
    set_has_log_id();
    log_id_ = log_id;
  } else {
    clear_has_log_id();
    log_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:setup_msg.log_id)
}

// required string pwd = 2;
inline bool setup_msg::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void setup_msg::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void setup_msg::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void setup_msg::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& setup_msg::pwd() const {
  // @@protoc_insertion_point(field_get:setup_msg.pwd)
  return *pwd_;
}
inline void setup_msg::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:setup_msg.pwd)
}
inline void setup_msg::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:setup_msg.pwd)
}
inline void setup_msg::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:setup_msg.pwd)
}
inline ::std::string* setup_msg::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:setup_msg.pwd)
  return pwd_;
}
inline ::std::string* setup_msg::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void setup_msg::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:setup_msg.pwd)
}

// required string email = 3;
inline bool setup_msg::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void setup_msg::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void setup_msg::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void setup_msg::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& setup_msg::email() const {
  // @@protoc_insertion_point(field_get:setup_msg.email)
  return *email_;
}
inline void setup_msg::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:setup_msg.email)
}
inline void setup_msg::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:setup_msg.email)
}
inline void setup_msg::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:setup_msg.email)
}
inline ::std::string* setup_msg::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:setup_msg.email)
  return email_;
}
inline ::std::string* setup_msg::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void setup_msg::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:setup_msg.email)
}

// -------------------------------------------------------------------

// up_usrinfo_msg

// required string log_id = 1;
inline bool up_usrinfo_msg::has_log_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void up_usrinfo_msg::set_has_log_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void up_usrinfo_msg::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void up_usrinfo_msg::clear_log_id() {
  if (log_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_->clear();
  }
  clear_has_log_id();
}
inline const ::std::string& up_usrinfo_msg::log_id() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.log_id)
  return *log_id_;
}
inline void up_usrinfo_msg::set_log_id(const ::std::string& value) {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_ = new ::std::string;
  }
  log_id_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.log_id)
}
inline void up_usrinfo_msg::set_log_id(const char* value) {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_ = new ::std::string;
  }
  log_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.log_id)
}
inline void up_usrinfo_msg::set_log_id(const char* value, size_t size) {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_ = new ::std::string;
  }
  log_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.log_id)
}
inline ::std::string* up_usrinfo_msg::mutable_log_id() {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.log_id)
  return log_id_;
}
inline ::std::string* up_usrinfo_msg::release_log_id() {
  clear_has_log_id();
  if (log_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = log_id_;
    log_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_log_id(::std::string* log_id) {
  if (log_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_id_;
  }
  if (log_id) {
    set_has_log_id();
    log_id_ = log_id;
  } else {
    clear_has_log_id();
    log_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.log_id)
}

// optional string nick_name = 2;
inline bool up_usrinfo_msg::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void up_usrinfo_msg::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void up_usrinfo_msg::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void up_usrinfo_msg::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& up_usrinfo_msg::nick_name() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.nick_name)
  return *nick_name_;
}
inline void up_usrinfo_msg::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.nick_name)
}
inline void up_usrinfo_msg::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.nick_name)
}
inline void up_usrinfo_msg::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.nick_name)
}
inline ::std::string* up_usrinfo_msg::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.nick_name)
  return nick_name_;
}
inline ::std::string* up_usrinfo_msg::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.nick_name)
}

// optional string name = 3;
inline bool up_usrinfo_msg::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void up_usrinfo_msg::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void up_usrinfo_msg::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void up_usrinfo_msg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& up_usrinfo_msg::name() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.name)
  return *name_;
}
inline void up_usrinfo_msg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.name)
}
inline void up_usrinfo_msg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.name)
}
inline void up_usrinfo_msg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.name)
}
inline ::std::string* up_usrinfo_msg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.name)
  return name_;
}
inline ::std::string* up_usrinfo_msg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.name)
}

// optional string sex = 4;
inline bool up_usrinfo_msg::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void up_usrinfo_msg::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void up_usrinfo_msg::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void up_usrinfo_msg::clear_sex() {
  if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& up_usrinfo_msg::sex() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.sex)
  return *sex_;
}
inline void up_usrinfo_msg::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.sex)
}
inline void up_usrinfo_msg::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.sex)
}
inline void up_usrinfo_msg::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.sex)
}
inline ::std::string* up_usrinfo_msg::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sex_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.sex)
  return sex_;
}
inline ::std::string* up_usrinfo_msg::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_sex(::std::string* sex) {
  if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.sex)
}

// optional string birth = 5;
inline bool up_usrinfo_msg::has_birth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void up_usrinfo_msg::set_has_birth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void up_usrinfo_msg::clear_has_birth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void up_usrinfo_msg::clear_birth() {
  if (birth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_->clear();
  }
  clear_has_birth();
}
inline const ::std::string& up_usrinfo_msg::birth() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.birth)
  return *birth_;
}
inline void up_usrinfo_msg::set_birth(const ::std::string& value) {
  set_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_ = new ::std::string;
  }
  birth_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.birth)
}
inline void up_usrinfo_msg::set_birth(const char* value) {
  set_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_ = new ::std::string;
  }
  birth_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.birth)
}
inline void up_usrinfo_msg::set_birth(const char* value, size_t size) {
  set_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_ = new ::std::string;
  }
  birth_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.birth)
}
inline ::std::string* up_usrinfo_msg::mutable_birth() {
  set_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    birth_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.birth)
  return birth_;
}
inline ::std::string* up_usrinfo_msg::release_birth() {
  clear_has_birth();
  if (birth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = birth_;
    birth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_birth(::std::string* birth) {
  if (birth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete birth_;
  }
  if (birth) {
    set_has_birth();
    birth_ = birth;
  } else {
    clear_has_birth();
    birth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.birth)
}

// optional string hometown = 6;
inline bool up_usrinfo_msg::has_hometown() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void up_usrinfo_msg::set_has_hometown() {
  _has_bits_[0] |= 0x00000020u;
}
inline void up_usrinfo_msg::clear_has_hometown() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void up_usrinfo_msg::clear_hometown() {
  if (hometown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_->clear();
  }
  clear_has_hometown();
}
inline const ::std::string& up_usrinfo_msg::hometown() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.hometown)
  return *hometown_;
}
inline void up_usrinfo_msg::set_hometown(const ::std::string& value) {
  set_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_ = new ::std::string;
  }
  hometown_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.hometown)
}
inline void up_usrinfo_msg::set_hometown(const char* value) {
  set_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_ = new ::std::string;
  }
  hometown_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.hometown)
}
inline void up_usrinfo_msg::set_hometown(const char* value, size_t size) {
  set_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_ = new ::std::string;
  }
  hometown_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.hometown)
}
inline ::std::string* up_usrinfo_msg::mutable_hometown() {
  set_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.hometown)
  return hometown_;
}
inline ::std::string* up_usrinfo_msg::release_hometown() {
  clear_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hometown_;
    hometown_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_hometown(::std::string* hometown) {
  if (hometown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hometown_;
  }
  if (hometown) {
    set_has_hometown();
    hometown_ = hometown;
  } else {
    clear_has_hometown();
    hometown_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.hometown)
}

// optional string location = 7;
inline bool up_usrinfo_msg::has_location() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void up_usrinfo_msg::set_has_location() {
  _has_bits_[0] |= 0x00000040u;
}
inline void up_usrinfo_msg::clear_has_location() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void up_usrinfo_msg::clear_location() {
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_->clear();
  }
  clear_has_location();
}
inline const ::std::string& up_usrinfo_msg::location() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.location)
  return *location_;
}
inline void up_usrinfo_msg::set_location(const ::std::string& value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_ = new ::std::string;
  }
  location_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.location)
}
inline void up_usrinfo_msg::set_location(const char* value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_ = new ::std::string;
  }
  location_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.location)
}
inline void up_usrinfo_msg::set_location(const char* value, size_t size) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_ = new ::std::string;
  }
  location_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.location)
}
inline ::std::string* up_usrinfo_msg::mutable_location() {
  set_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    location_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.location)
  return location_;
}
inline ::std::string* up_usrinfo_msg::release_location() {
  clear_has_location();
  if (location_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = location_;
    location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_location(::std::string* location) {
  if (location_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_;
  }
  if (location) {
    set_has_location();
    location_ = location;
  } else {
    clear_has_location();
    location_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.location)
}

// optional string blood = 8;
inline bool up_usrinfo_msg::has_blood() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void up_usrinfo_msg::set_has_blood() {
  _has_bits_[0] |= 0x00000080u;
}
inline void up_usrinfo_msg::clear_has_blood() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void up_usrinfo_msg::clear_blood() {
  if (blood_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blood_->clear();
  }
  clear_has_blood();
}
inline const ::std::string& up_usrinfo_msg::blood() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.blood)
  return *blood_;
}
inline void up_usrinfo_msg::set_blood(const ::std::string& value) {
  set_has_blood();
  if (blood_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blood_ = new ::std::string;
  }
  blood_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.blood)
}
inline void up_usrinfo_msg::set_blood(const char* value) {
  set_has_blood();
  if (blood_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blood_ = new ::std::string;
  }
  blood_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.blood)
}
inline void up_usrinfo_msg::set_blood(const char* value, size_t size) {
  set_has_blood();
  if (blood_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blood_ = new ::std::string;
  }
  blood_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.blood)
}
inline ::std::string* up_usrinfo_msg::mutable_blood() {
  set_has_blood();
  if (blood_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blood_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.blood)
  return blood_;
}
inline ::std::string* up_usrinfo_msg::release_blood() {
  clear_has_blood();
  if (blood_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blood_;
    blood_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_blood(::std::string* blood) {
  if (blood_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blood_;
  }
  if (blood) {
    set_has_blood();
    blood_ = blood;
  } else {
    clear_has_blood();
    blood_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.blood)
}

// optional string tel = 9;
inline bool up_usrinfo_msg::has_tel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void up_usrinfo_msg::set_has_tel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void up_usrinfo_msg::clear_has_tel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void up_usrinfo_msg::clear_tel() {
  if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_->clear();
  }
  clear_has_tel();
}
inline const ::std::string& up_usrinfo_msg::tel() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.tel)
  return *tel_;
}
inline void up_usrinfo_msg::set_tel(const ::std::string& value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.tel)
}
inline void up_usrinfo_msg::set_tel(const char* value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.tel)
}
inline void up_usrinfo_msg::set_tel(const char* value, size_t size) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_ = new ::std::string;
  }
  tel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.tel)
}
inline ::std::string* up_usrinfo_msg::mutable_tel() {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.tel)
  return tel_;
}
inline ::std::string* up_usrinfo_msg::release_tel() {
  clear_has_tel();
  if (tel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tel_;
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_tel(::std::string* tel) {
  if (tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tel_;
  }
  if (tel) {
    set_has_tel();
    tel_ = tel;
  } else {
    clear_has_tel();
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.tel)
}

// optional int32 job = 10;
inline bool up_usrinfo_msg::has_job() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void up_usrinfo_msg::set_has_job() {
  _has_bits_[0] |= 0x00000200u;
}
inline void up_usrinfo_msg::clear_has_job() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void up_usrinfo_msg::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 up_usrinfo_msg::job() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.job)
  return job_;
}
inline void up_usrinfo_msg::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.job)
}

// optional string school = 11;
inline bool up_usrinfo_msg::has_school() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void up_usrinfo_msg::set_has_school() {
  _has_bits_[0] |= 0x00000400u;
}
inline void up_usrinfo_msg::clear_has_school() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void up_usrinfo_msg::clear_school() {
  if (school_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_->clear();
  }
  clear_has_school();
}
inline const ::std::string& up_usrinfo_msg::school() const {
  // @@protoc_insertion_point(field_get:up_usrinfo_msg.school)
  return *school_;
}
inline void up_usrinfo_msg::set_school(const ::std::string& value) {
  set_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_ = new ::std::string;
  }
  school_->assign(value);
  // @@protoc_insertion_point(field_set:up_usrinfo_msg.school)
}
inline void up_usrinfo_msg::set_school(const char* value) {
  set_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_ = new ::std::string;
  }
  school_->assign(value);
  // @@protoc_insertion_point(field_set_char:up_usrinfo_msg.school)
}
inline void up_usrinfo_msg::set_school(const char* value, size_t size) {
  set_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_ = new ::std::string;
  }
  school_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:up_usrinfo_msg.school)
}
inline ::std::string* up_usrinfo_msg::mutable_school() {
  set_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:up_usrinfo_msg.school)
  return school_;
}
inline ::std::string* up_usrinfo_msg::release_school() {
  clear_has_school();
  if (school_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = school_;
    school_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void up_usrinfo_msg::set_allocated_school(::std::string* school) {
  if (school_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_;
  }
  if (school) {
    set_has_school();
    school_ = school;
  } else {
    clear_has_school();
    school_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:up_usrinfo_msg.school)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_iegad_5fapp_5fsvr_5fmsg_2eproto__INCLUDED
