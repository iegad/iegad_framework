/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef onepc.Data_TYPES_H
#define onepc.Data_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace iegad { namespace onepc { namespace data {

class DataDictionary;

class UsrSetIn;

class UsrIDEmailMap;

class UsrIDPhoneNumMap;

class UsrIDDeviceMap;

class UsrPersonal;

class GamerInfo;

typedef struct _DataDictionary__isset {
  _DataDictionary__isset() : Flag(true), Key(false), Value(false), Type(false), Descript(false) {}
  bool Flag :1;
  bool Key :1;
  bool Value :1;
  bool Type :1;
  bool Descript :1;
} _DataDictionary__isset;

class DataDictionary {
 public:

  DataDictionary(const DataDictionary&);
  DataDictionary& operator=(const DataDictionary&);
  DataDictionary() : Flag(0), Key(), Value(), Type(), Descript() {
  }

  virtual ~DataDictionary() throw();
  int8_t Flag;
  std::string Key;
  std::string Value;
  std::string Type;
  std::string Descript;

  _DataDictionary__isset __isset;

  void __set_Flag(const int8_t val);

  void __set_Key(const std::string& val);

  void __set_Value(const std::string& val);

  void __set_Type(const std::string& val);

  void __set_Descript(const std::string& val);

  bool operator == (const DataDictionary & rhs) const
  {
    if (!(Flag == rhs.Flag))
      return false;
    if (!(Key == rhs.Key))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(Descript == rhs.Descript))
      return false;
    return true;
  }
  bool operator != (const DataDictionary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataDictionary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DataDictionary &a, DataDictionary &b);

inline std::ostream& operator<<(std::ostream& out, const DataDictionary& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UsrSetIn__isset {
  _UsrSetIn__isset() : Status(true), UsrID(true), Password(false), Handler(false) {}
  bool Status :1;
  bool UsrID :1;
  bool Password :1;
  bool Handler :1;
} _UsrSetIn__isset;

class UsrSetIn {
 public:

  UsrSetIn(const UsrSetIn&);
  UsrSetIn& operator=(const UsrSetIn&);
  UsrSetIn() : Status(0), UsrID(0), Password(), Handler() {
  }

  virtual ~UsrSetIn() throw();
  int8_t Status;
  int32_t UsrID;
  std::string Password;
  std::string Handler;

  _UsrSetIn__isset __isset;

  void __set_Status(const int8_t val);

  void __set_UsrID(const int32_t val);

  void __set_Password(const std::string& val);

  void __set_Handler(const std::string& val);

  bool operator == (const UsrSetIn & rhs) const
  {
    if (!(Status == rhs.Status))
      return false;
    if (!(UsrID == rhs.UsrID))
      return false;
    if (!(Password == rhs.Password))
      return false;
    if (!(Handler == rhs.Handler))
      return false;
    return true;
  }
  bool operator != (const UsrSetIn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsrSetIn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UsrSetIn &a, UsrSetIn &b);

inline std::ostream& operator<<(std::ostream& out, const UsrSetIn& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UsrIDEmailMap__isset {
  _UsrIDEmailMap__isset() : UsrID(true), Email(false) {}
  bool UsrID :1;
  bool Email :1;
} _UsrIDEmailMap__isset;

class UsrIDEmailMap {
 public:

  UsrIDEmailMap(const UsrIDEmailMap&);
  UsrIDEmailMap& operator=(const UsrIDEmailMap&);
  UsrIDEmailMap() : UsrID(0), Email() {
  }

  virtual ~UsrIDEmailMap() throw();
  int32_t UsrID;
  std::string Email;

  _UsrIDEmailMap__isset __isset;

  void __set_UsrID(const int32_t val);

  void __set_Email(const std::string& val);

  bool operator == (const UsrIDEmailMap & rhs) const
  {
    if (!(UsrID == rhs.UsrID))
      return false;
    if (!(Email == rhs.Email))
      return false;
    return true;
  }
  bool operator != (const UsrIDEmailMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsrIDEmailMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UsrIDEmailMap &a, UsrIDEmailMap &b);

inline std::ostream& operator<<(std::ostream& out, const UsrIDEmailMap& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UsrIDPhoneNumMap__isset {
  _UsrIDPhoneNumMap__isset() : UsrID(true), PhoneNumber(true) {}
  bool UsrID :1;
  bool PhoneNumber :1;
} _UsrIDPhoneNumMap__isset;

class UsrIDPhoneNumMap {
 public:

  UsrIDPhoneNumMap(const UsrIDPhoneNumMap&);
  UsrIDPhoneNumMap& operator=(const UsrIDPhoneNumMap&);
  UsrIDPhoneNumMap() : UsrID(0), PhoneNumber(0LL) {
  }

  virtual ~UsrIDPhoneNumMap() throw();
  int32_t UsrID;
  int64_t PhoneNumber;

  _UsrIDPhoneNumMap__isset __isset;

  void __set_UsrID(const int32_t val);

  void __set_PhoneNumber(const int64_t val);

  bool operator == (const UsrIDPhoneNumMap & rhs) const
  {
    if (!(UsrID == rhs.UsrID))
      return false;
    if (!(PhoneNumber == rhs.PhoneNumber))
      return false;
    return true;
  }
  bool operator != (const UsrIDPhoneNumMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsrIDPhoneNumMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UsrIDPhoneNumMap &a, UsrIDPhoneNumMap &b);

inline std::ostream& operator<<(std::ostream& out, const UsrIDPhoneNumMap& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UsrIDDeviceMap__isset {
  _UsrIDDeviceMap__isset() : UsrID(true), Device(false) {}
  bool UsrID :1;
  bool Device :1;
} _UsrIDDeviceMap__isset;

class UsrIDDeviceMap {
 public:

  UsrIDDeviceMap(const UsrIDDeviceMap&);
  UsrIDDeviceMap& operator=(const UsrIDDeviceMap&);
  UsrIDDeviceMap() : UsrID(0), Device() {
  }

  virtual ~UsrIDDeviceMap() throw();
  int32_t UsrID;
  std::string Device;

  _UsrIDDeviceMap__isset __isset;

  void __set_UsrID(const int32_t val);

  void __set_Device(const std::string& val);

  bool operator == (const UsrIDDeviceMap & rhs) const
  {
    if (!(UsrID == rhs.UsrID))
      return false;
    if (!(Device == rhs.Device))
      return false;
    return true;
  }
  bool operator != (const UsrIDDeviceMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsrIDDeviceMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UsrIDDeviceMap &a, UsrIDDeviceMap &b);

inline std::ostream& operator<<(std::ostream& out, const UsrIDDeviceMap& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UsrPersonal__isset {
  _UsrPersonal__isset() : Sex(true), Nation(true), Education(true), Constellation(true), Blood(true), ShengXiao(true), Flag(true), Job(true), Hometown(true), LocAddress(true), UsrID(true), BirthDate(true), RegistDate(true), Nick(false), Name(false), College(false) {}
  bool Sex :1;
  bool Nation :1;
  bool Education :1;
  bool Constellation :1;
  bool Blood :1;
  bool ShengXiao :1;
  bool Flag :1;
  bool Job :1;
  bool Hometown :1;
  bool LocAddress :1;
  bool UsrID :1;
  bool BirthDate :1;
  bool RegistDate :1;
  bool Nick :1;
  bool Name :1;
  bool College :1;
} _UsrPersonal__isset;

class UsrPersonal {
 public:

  UsrPersonal(const UsrPersonal&);
  UsrPersonal& operator=(const UsrPersonal&);
  UsrPersonal() : Sex(0), Nation(0), Education(0), Constellation(0), Blood(0), ShengXiao(0), Flag(0), Job(0), Hometown(0), LocAddress(0), UsrID(0), BirthDate(0LL), RegistDate(0LL), Nick(), Name(), College() {
  }

  virtual ~UsrPersonal() throw();
  int8_t Sex;
  int8_t Nation;
  int8_t Education;
  int8_t Constellation;
  int8_t Blood;
  int8_t ShengXiao;
  int8_t Flag;
  int16_t Job;
  int32_t Hometown;
  int32_t LocAddress;
  int32_t UsrID;
  int64_t BirthDate;
  int64_t RegistDate;
  std::string Nick;
  std::string Name;
  std::string College;

  _UsrPersonal__isset __isset;

  void __set_Sex(const int8_t val);

  void __set_Nation(const int8_t val);

  void __set_Education(const int8_t val);

  void __set_Constellation(const int8_t val);

  void __set_Blood(const int8_t val);

  void __set_ShengXiao(const int8_t val);

  void __set_Flag(const int8_t val);

  void __set_Job(const int16_t val);

  void __set_Hometown(const int32_t val);

  void __set_LocAddress(const int32_t val);

  void __set_UsrID(const int32_t val);

  void __set_BirthDate(const int64_t val);

  void __set_RegistDate(const int64_t val);

  void __set_Nick(const std::string& val);

  void __set_Name(const std::string& val);

  void __set_College(const std::string& val);

  bool operator == (const UsrPersonal & rhs) const
  {
    if (!(Sex == rhs.Sex))
      return false;
    if (!(Nation == rhs.Nation))
      return false;
    if (!(Education == rhs.Education))
      return false;
    if (!(Constellation == rhs.Constellation))
      return false;
    if (!(Blood == rhs.Blood))
      return false;
    if (!(ShengXiao == rhs.ShengXiao))
      return false;
    if (!(Flag == rhs.Flag))
      return false;
    if (!(Job == rhs.Job))
      return false;
    if (!(Hometown == rhs.Hometown))
      return false;
    if (!(LocAddress == rhs.LocAddress))
      return false;
    if (!(UsrID == rhs.UsrID))
      return false;
    if (!(BirthDate == rhs.BirthDate))
      return false;
    if (!(RegistDate == rhs.RegistDate))
      return false;
    if (!(Nick == rhs.Nick))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(College == rhs.College))
      return false;
    return true;
  }
  bool operator != (const UsrPersonal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsrPersonal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UsrPersonal &a, UsrPersonal &b);

inline std::ostream& operator<<(std::ostream& out, const UsrPersonal& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GamerInfo__isset {
  _GamerInfo__isset() : Vocation(true), Camp(true), Model(true), Head(true), HeadColor(true), Skin(true), Honor(true), Flag(true), Exp(true), UsrID(true), GamerID(false), Name(false) {}
  bool Vocation :1;
  bool Camp :1;
  bool Model :1;
  bool Head :1;
  bool HeadColor :1;
  bool Skin :1;
  bool Honor :1;
  bool Flag :1;
  bool Exp :1;
  bool UsrID :1;
  bool GamerID :1;
  bool Name :1;
} _GamerInfo__isset;

class GamerInfo {
 public:

  GamerInfo(const GamerInfo&);
  GamerInfo& operator=(const GamerInfo&);
  GamerInfo() : Vocation(0), Camp(0), Model(0), Head(0), HeadColor(0), Skin(0), Honor(0), Flag(0), Exp(0), UsrID(0), GamerID(), Name() {
  }

  virtual ~GamerInfo() throw();
  int8_t Vocation;
  int8_t Camp;
  int8_t Model;
  int8_t Head;
  int8_t HeadColor;
  int8_t Skin;
  int8_t Honor;
  int8_t Flag;
  int32_t Exp;
  int32_t UsrID;
  std::string GamerID;
  std::string Name;

  _GamerInfo__isset __isset;

  void __set_Vocation(const int8_t val);

  void __set_Camp(const int8_t val);

  void __set_Model(const int8_t val);

  void __set_Head(const int8_t val);

  void __set_HeadColor(const int8_t val);

  void __set_Skin(const int8_t val);

  void __set_Honor(const int8_t val);

  void __set_Flag(const int8_t val);

  void __set_Exp(const int32_t val);

  void __set_UsrID(const int32_t val);

  void __set_GamerID(const std::string& val);

  void __set_Name(const std::string& val);

  bool operator == (const GamerInfo & rhs) const
  {
    if (!(Vocation == rhs.Vocation))
      return false;
    if (!(Camp == rhs.Camp))
      return false;
    if (!(Model == rhs.Model))
      return false;
    if (!(Head == rhs.Head))
      return false;
    if (!(HeadColor == rhs.HeadColor))
      return false;
    if (!(Skin == rhs.Skin))
      return false;
    if (!(Honor == rhs.Honor))
      return false;
    if (!(Flag == rhs.Flag))
      return false;
    if (!(Exp == rhs.Exp))
      return false;
    if (!(UsrID == rhs.UsrID))
      return false;
    if (!(GamerID == rhs.GamerID))
      return false;
    if (!(Name == rhs.Name))
      return false;
    return true;
  }
  bool operator != (const GamerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GamerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GamerInfo &a, GamerInfo &b);

inline std::ostream& operator<<(std::ostream& out, const GamerInfo& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
