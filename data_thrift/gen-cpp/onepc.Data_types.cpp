/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "onepc.Data_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace iegad { namespace onepc { namespace data {


DataDictionary::~DataDictionary() throw() {
}


void DataDictionary::__set_Flag(const int8_t val) {
  this->Flag = val;
}

void DataDictionary::__set_Key(const std::string& val) {
  this->Key = val;
}

void DataDictionary::__set_Value(const std::string& val) {
  this->Value = val;
}

void DataDictionary::__set_Type(const std::string& val) {
  this->Type = val;
}

void DataDictionary::__set_Descript(const std::string& val) {
  this->Descript = val;
}

uint32_t DataDictionary::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Flag);
          this->__isset.Flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Key);
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Type);
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Descript);
          this->__isset.Descript = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataDictionary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataDictionary");

  xfer += oprot->writeFieldBegin("Flag", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->Flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Descript", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Descript);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DataDictionary &a, DataDictionary &b) {
  using ::std::swap;
  swap(a.Flag, b.Flag);
  swap(a.Key, b.Key);
  swap(a.Value, b.Value);
  swap(a.Type, b.Type);
  swap(a.Descript, b.Descript);
  swap(a.__isset, b.__isset);
}

DataDictionary::DataDictionary(const DataDictionary& other0) {
  Flag = other0.Flag;
  Key = other0.Key;
  Value = other0.Value;
  Type = other0.Type;
  Descript = other0.Descript;
  __isset = other0.__isset;
}
DataDictionary& DataDictionary::operator=(const DataDictionary& other1) {
  Flag = other1.Flag;
  Key = other1.Key;
  Value = other1.Value;
  Type = other1.Type;
  Descript = other1.Descript;
  __isset = other1.__isset;
  return *this;
}
void DataDictionary::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DataDictionary(";
  out << "Flag=" << to_string(Flag);
  out << ", " << "Key=" << to_string(Key);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "Descript=" << to_string(Descript);
  out << ")";
}


UsrSetIn::~UsrSetIn() throw() {
}


void UsrSetIn::__set_Status(const int8_t val) {
  this->Status = val;
}

void UsrSetIn::__set_UsrID(const int32_t val) {
  this->UsrID = val;
}

void UsrSetIn::__set_Password(const std::string& val) {
  this->Password = val;
}

void UsrSetIn::__set_Handler(const std::string& val) {
  this->Handler = val;
}

uint32_t UsrSetIn::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Status);
          this->__isset.Status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->UsrID);
          this->__isset.UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Password);
          this->__isset.Password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Handler);
          this->__isset.Handler = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UsrSetIn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UsrSetIn");

  xfer += oprot->writeFieldBegin("Status", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->Status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Handler", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Handler);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UsrSetIn &a, UsrSetIn &b) {
  using ::std::swap;
  swap(a.Status, b.Status);
  swap(a.UsrID, b.UsrID);
  swap(a.Password, b.Password);
  swap(a.Handler, b.Handler);
  swap(a.__isset, b.__isset);
}

UsrSetIn::UsrSetIn(const UsrSetIn& other2) {
  Status = other2.Status;
  UsrID = other2.UsrID;
  Password = other2.Password;
  Handler = other2.Handler;
  __isset = other2.__isset;
}
UsrSetIn& UsrSetIn::operator=(const UsrSetIn& other3) {
  Status = other3.Status;
  UsrID = other3.UsrID;
  Password = other3.Password;
  Handler = other3.Handler;
  __isset = other3.__isset;
  return *this;
}
void UsrSetIn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UsrSetIn(";
  out << "Status=" << to_string(Status);
  out << ", " << "UsrID=" << to_string(UsrID);
  out << ", " << "Password=" << to_string(Password);
  out << ", " << "Handler=" << to_string(Handler);
  out << ")";
}


UsrIDEmailMap::~UsrIDEmailMap() throw() {
}


void UsrIDEmailMap::__set_UsrID(const int32_t val) {
  this->UsrID = val;
}

void UsrIDEmailMap::__set_Email(const std::string& val) {
  this->Email = val;
}

uint32_t UsrIDEmailMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->UsrID);
          this->__isset.UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Email);
          this->__isset.Email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UsrIDEmailMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UsrIDEmailMap");

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Email", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UsrIDEmailMap &a, UsrIDEmailMap &b) {
  using ::std::swap;
  swap(a.UsrID, b.UsrID);
  swap(a.Email, b.Email);
  swap(a.__isset, b.__isset);
}

UsrIDEmailMap::UsrIDEmailMap(const UsrIDEmailMap& other4) {
  UsrID = other4.UsrID;
  Email = other4.Email;
  __isset = other4.__isset;
}
UsrIDEmailMap& UsrIDEmailMap::operator=(const UsrIDEmailMap& other5) {
  UsrID = other5.UsrID;
  Email = other5.Email;
  __isset = other5.__isset;
  return *this;
}
void UsrIDEmailMap::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UsrIDEmailMap(";
  out << "UsrID=" << to_string(UsrID);
  out << ", " << "Email=" << to_string(Email);
  out << ")";
}


UsrIDPhoneNumMap::~UsrIDPhoneNumMap() throw() {
}


void UsrIDPhoneNumMap::__set_UsrID(const int32_t val) {
  this->UsrID = val;
}

void UsrIDPhoneNumMap::__set_PhoneNumber(const int64_t val) {
  this->PhoneNumber = val;
}

uint32_t UsrIDPhoneNumMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->UsrID);
          this->__isset.UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->PhoneNumber);
          this->__isset.PhoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UsrIDPhoneNumMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UsrIDPhoneNumMap");

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PhoneNumber", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->PhoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UsrIDPhoneNumMap &a, UsrIDPhoneNumMap &b) {
  using ::std::swap;
  swap(a.UsrID, b.UsrID);
  swap(a.PhoneNumber, b.PhoneNumber);
  swap(a.__isset, b.__isset);
}

UsrIDPhoneNumMap::UsrIDPhoneNumMap(const UsrIDPhoneNumMap& other6) {
  UsrID = other6.UsrID;
  PhoneNumber = other6.PhoneNumber;
  __isset = other6.__isset;
}
UsrIDPhoneNumMap& UsrIDPhoneNumMap::operator=(const UsrIDPhoneNumMap& other7) {
  UsrID = other7.UsrID;
  PhoneNumber = other7.PhoneNumber;
  __isset = other7.__isset;
  return *this;
}
void UsrIDPhoneNumMap::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UsrIDPhoneNumMap(";
  out << "UsrID=" << to_string(UsrID);
  out << ", " << "PhoneNumber=" << to_string(PhoneNumber);
  out << ")";
}


UsrIDDeviceMap::~UsrIDDeviceMap() throw() {
}


void UsrIDDeviceMap::__set_UsrID(const int32_t val) {
  this->UsrID = val;
}

void UsrIDDeviceMap::__set_Device(const std::string& val) {
  this->Device = val;
}

uint32_t UsrIDDeviceMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->UsrID);
          this->__isset.UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Device);
          this->__isset.Device = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UsrIDDeviceMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UsrIDDeviceMap");

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Device", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Device);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UsrIDDeviceMap &a, UsrIDDeviceMap &b) {
  using ::std::swap;
  swap(a.UsrID, b.UsrID);
  swap(a.Device, b.Device);
  swap(a.__isset, b.__isset);
}

UsrIDDeviceMap::UsrIDDeviceMap(const UsrIDDeviceMap& other8) {
  UsrID = other8.UsrID;
  Device = other8.Device;
  __isset = other8.__isset;
}
UsrIDDeviceMap& UsrIDDeviceMap::operator=(const UsrIDDeviceMap& other9) {
  UsrID = other9.UsrID;
  Device = other9.Device;
  __isset = other9.__isset;
  return *this;
}
void UsrIDDeviceMap::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UsrIDDeviceMap(";
  out << "UsrID=" << to_string(UsrID);
  out << ", " << "Device=" << to_string(Device);
  out << ")";
}


UsrPersonal::~UsrPersonal() throw() {
}


void UsrPersonal::__set_Sex(const int8_t val) {
  this->Sex = val;
}

void UsrPersonal::__set_Nation(const int8_t val) {
  this->Nation = val;
}

void UsrPersonal::__set_Education(const int8_t val) {
  this->Education = val;
}

void UsrPersonal::__set_Constellation(const int8_t val) {
  this->Constellation = val;
}

void UsrPersonal::__set_Blood(const int8_t val) {
  this->Blood = val;
}

void UsrPersonal::__set_ShengXiao(const int8_t val) {
  this->ShengXiao = val;
}

void UsrPersonal::__set_Flag(const int8_t val) {
  this->Flag = val;
}

void UsrPersonal::__set_Job(const int16_t val) {
  this->Job = val;
}

void UsrPersonal::__set_Hometown(const int32_t val) {
  this->Hometown = val;
}

void UsrPersonal::__set_LocAddress(const int32_t val) {
  this->LocAddress = val;
}

void UsrPersonal::__set_UsrID(const int32_t val) {
  this->UsrID = val;
}

void UsrPersonal::__set_BirthDate(const int64_t val) {
  this->BirthDate = val;
}

void UsrPersonal::__set_RegistDate(const int64_t val) {
  this->RegistDate = val;
}

void UsrPersonal::__set_Nick(const std::string& val) {
  this->Nick = val;
}

void UsrPersonal::__set_Name(const std::string& val) {
  this->Name = val;
}

void UsrPersonal::__set_College(const std::string& val) {
  this->College = val;
}

uint32_t UsrPersonal::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Sex);
          this->__isset.Sex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Nation);
          this->__isset.Nation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Education);
          this->__isset.Education = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Constellation);
          this->__isset.Constellation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Blood);
          this->__isset.Blood = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->ShengXiao);
          this->__isset.ShengXiao = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Flag);
          this->__isset.Flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Job);
          this->__isset.Job = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Hometown);
          this->__isset.Hometown = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->LocAddress);
          this->__isset.LocAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->UsrID);
          this->__isset.UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->BirthDate);
          this->__isset.BirthDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->RegistDate);
          this->__isset.RegistDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Nick);
          this->__isset.Nick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->College);
          this->__isset.College = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UsrPersonal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UsrPersonal");

  xfer += oprot->writeFieldBegin("Sex", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->Sex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Nation", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->Nation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Education", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->Education);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Constellation", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->Constellation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Blood", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->Blood);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ShengXiao", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->ShengXiao);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Flag", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->Flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Job", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->Job);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Hometown", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->Hometown);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LocAddress", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->LocAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BirthDate", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->BirthDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RegistDate", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->RegistDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Nick", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->Nick);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("College", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->College);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UsrPersonal &a, UsrPersonal &b) {
  using ::std::swap;
  swap(a.Sex, b.Sex);
  swap(a.Nation, b.Nation);
  swap(a.Education, b.Education);
  swap(a.Constellation, b.Constellation);
  swap(a.Blood, b.Blood);
  swap(a.ShengXiao, b.ShengXiao);
  swap(a.Flag, b.Flag);
  swap(a.Job, b.Job);
  swap(a.Hometown, b.Hometown);
  swap(a.LocAddress, b.LocAddress);
  swap(a.UsrID, b.UsrID);
  swap(a.BirthDate, b.BirthDate);
  swap(a.RegistDate, b.RegistDate);
  swap(a.Nick, b.Nick);
  swap(a.Name, b.Name);
  swap(a.College, b.College);
  swap(a.__isset, b.__isset);
}

UsrPersonal::UsrPersonal(const UsrPersonal& other10) {
  Sex = other10.Sex;
  Nation = other10.Nation;
  Education = other10.Education;
  Constellation = other10.Constellation;
  Blood = other10.Blood;
  ShengXiao = other10.ShengXiao;
  Flag = other10.Flag;
  Job = other10.Job;
  Hometown = other10.Hometown;
  LocAddress = other10.LocAddress;
  UsrID = other10.UsrID;
  BirthDate = other10.BirthDate;
  RegistDate = other10.RegistDate;
  Nick = other10.Nick;
  Name = other10.Name;
  College = other10.College;
  __isset = other10.__isset;
}
UsrPersonal& UsrPersonal::operator=(const UsrPersonal& other11) {
  Sex = other11.Sex;
  Nation = other11.Nation;
  Education = other11.Education;
  Constellation = other11.Constellation;
  Blood = other11.Blood;
  ShengXiao = other11.ShengXiao;
  Flag = other11.Flag;
  Job = other11.Job;
  Hometown = other11.Hometown;
  LocAddress = other11.LocAddress;
  UsrID = other11.UsrID;
  BirthDate = other11.BirthDate;
  RegistDate = other11.RegistDate;
  Nick = other11.Nick;
  Name = other11.Name;
  College = other11.College;
  __isset = other11.__isset;
  return *this;
}
void UsrPersonal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UsrPersonal(";
  out << "Sex=" << to_string(Sex);
  out << ", " << "Nation=" << to_string(Nation);
  out << ", " << "Education=" << to_string(Education);
  out << ", " << "Constellation=" << to_string(Constellation);
  out << ", " << "Blood=" << to_string(Blood);
  out << ", " << "ShengXiao=" << to_string(ShengXiao);
  out << ", " << "Flag=" << to_string(Flag);
  out << ", " << "Job=" << to_string(Job);
  out << ", " << "Hometown=" << to_string(Hometown);
  out << ", " << "LocAddress=" << to_string(LocAddress);
  out << ", " << "UsrID=" << to_string(UsrID);
  out << ", " << "BirthDate=" << to_string(BirthDate);
  out << ", " << "RegistDate=" << to_string(RegistDate);
  out << ", " << "Nick=" << to_string(Nick);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "College=" << to_string(College);
  out << ")";
}


GamerInfo::~GamerInfo() throw() {
}


void GamerInfo::__set_Vocation(const int8_t val) {
  this->Vocation = val;
}

void GamerInfo::__set_Camp(const int8_t val) {
  this->Camp = val;
}

void GamerInfo::__set_Model(const int8_t val) {
  this->Model = val;
}

void GamerInfo::__set_Head(const int8_t val) {
  this->Head = val;
}

void GamerInfo::__set_HeadColor(const int8_t val) {
  this->HeadColor = val;
}

void GamerInfo::__set_Skin(const int8_t val) {
  this->Skin = val;
}

void GamerInfo::__set_Honor(const int8_t val) {
  this->Honor = val;
}

void GamerInfo::__set_Flag(const int8_t val) {
  this->Flag = val;
}

void GamerInfo::__set_Exp(const int32_t val) {
  this->Exp = val;
}

void GamerInfo::__set_UsrID(const int32_t val) {
  this->UsrID = val;
}

void GamerInfo::__set_GamerID(const std::string& val) {
  this->GamerID = val;
}

void GamerInfo::__set_Name(const std::string& val) {
  this->Name = val;
}

uint32_t GamerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Vocation);
          this->__isset.Vocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Camp);
          this->__isset.Camp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Model);
          this->__isset.Model = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Head);
          this->__isset.Head = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->HeadColor);
          this->__isset.HeadColor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Skin);
          this->__isset.Skin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Honor);
          this->__isset.Honor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Flag);
          this->__isset.Flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Exp);
          this->__isset.Exp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->UsrID);
          this->__isset.UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->GamerID);
          this->__isset.GamerID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GamerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GamerInfo");

  xfer += oprot->writeFieldBegin("Vocation", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->Vocation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Camp", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->Camp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Model", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->Model);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Head", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->Head);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HeadColor", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->HeadColor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Skin", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->Skin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Honor", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->Honor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Flag", ::apache::thrift::protocol::T_BYTE, 8);
  xfer += oprot->writeByte(this->Flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Exp", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->Exp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("GamerID", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->GamerID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GamerInfo &a, GamerInfo &b) {
  using ::std::swap;
  swap(a.Vocation, b.Vocation);
  swap(a.Camp, b.Camp);
  swap(a.Model, b.Model);
  swap(a.Head, b.Head);
  swap(a.HeadColor, b.HeadColor);
  swap(a.Skin, b.Skin);
  swap(a.Honor, b.Honor);
  swap(a.Flag, b.Flag);
  swap(a.Exp, b.Exp);
  swap(a.UsrID, b.UsrID);
  swap(a.GamerID, b.GamerID);
  swap(a.Name, b.Name);
  swap(a.__isset, b.__isset);
}

GamerInfo::GamerInfo(const GamerInfo& other12) {
  Vocation = other12.Vocation;
  Camp = other12.Camp;
  Model = other12.Model;
  Head = other12.Head;
  HeadColor = other12.HeadColor;
  Skin = other12.Skin;
  Honor = other12.Honor;
  Flag = other12.Flag;
  Exp = other12.Exp;
  UsrID = other12.UsrID;
  GamerID = other12.GamerID;
  Name = other12.Name;
  __isset = other12.__isset;
}
GamerInfo& GamerInfo::operator=(const GamerInfo& other13) {
  Vocation = other13.Vocation;
  Camp = other13.Camp;
  Model = other13.Model;
  Head = other13.Head;
  HeadColor = other13.HeadColor;
  Skin = other13.Skin;
  Honor = other13.Honor;
  Flag = other13.Flag;
  Exp = other13.Exp;
  UsrID = other13.UsrID;
  GamerID = other13.GamerID;
  Name = other13.Name;
  __isset = other13.__isset;
  return *this;
}
void GamerInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GamerInfo(";
  out << "Vocation=" << to_string(Vocation);
  out << ", " << "Camp=" << to_string(Camp);
  out << ", " << "Model=" << to_string(Model);
  out << ", " << "Head=" << to_string(Head);
  out << ", " << "HeadColor=" << to_string(HeadColor);
  out << ", " << "Skin=" << to_string(Skin);
  out << ", " << "Honor=" << to_string(Honor);
  out << ", " << "Flag=" << to_string(Flag);
  out << ", " << "Exp=" << to_string(Exp);
  out << ", " << "UsrID=" << to_string(UsrID);
  out << ", " << "GamerID=" << to_string(GamerID);
  out << ", " << "Name=" << to_string(Name);
  out << ")";
}

}}} // namespace
