/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Onepc.AppService
{
  public partial class AppService {
    public interface Iface {
      string SetUp(string _szEmail, string _szPhoneNumber, string _szPassword, string _szDevice, Location _location);
      #if SILVERLIGHT
      IAsyncResult Begin_SetUp(AsyncCallback callback, object state, string _szEmail, string _szPhoneNumber, string _szPassword, string _szDevice, Location _location);
      string End_SetUp(IAsyncResult asyncResult);
      #endif
      void BeginBindPhoneNumber(string _uHandle, string _szPhoneNumber, string _szDevice, Location _location);
      #if SILVERLIGHT
      IAsyncResult Begin_BeginBindPhoneNumber(AsyncCallback callback, object state, string _uHandle, string _szPhoneNumber, string _szDevice, Location _location);
      void End_BeginBindPhoneNumber(IAsyncResult asyncResult);
      #endif
      int BindPhoneNumber(string _uHandle, string _szPhoneNumber, int _iIdentifyCode, string _szDevice, Location _location);
      #if SILVERLIGHT
      IAsyncResult Begin_BindPhoneNumber(AsyncCallback callback, object state, string _uHandle, string _szPhoneNumber, int _iIdentifyCode, string _szDevice, Location _location);
      int End_BindPhoneNumber(IAsyncResult asyncResult);
      #endif
      int UpdatePassword(string _uHandle, string _szNewPassword, string _szOldPassword, string _szDevice, Location _location);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdatePassword(AsyncCallback callback, object state, string _uHandle, string _szNewPassword, string _szOldPassword, string _szDevice, Location _location);
      int End_UpdatePassword(IAsyncResult asyncResult);
      #endif
      int BeginUpdatePasswordByPhone(string _szPhoneNumber, string _szDevice, Location _location);
      #if SILVERLIGHT
      IAsyncResult Begin_BeginUpdatePasswordByPhone(AsyncCallback callback, object state, string _szPhoneNumber, string _szDevice, Location _location);
      int End_BeginUpdatePasswordByPhone(IAsyncResult asyncResult);
      #endif
      int UpdatePasswordByPhone(string _szPhoneNumber, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdatePasswordByPhone(AsyncCallback callback, object state, string _szPhoneNumber, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location);
      int End_UpdatePasswordByPhone(IAsyncResult asyncResult);
      #endif
      int BeginUpdatePasswordByEmail(string _szEmail, string _szDevice, Location _location);
      #if SILVERLIGHT
      IAsyncResult Begin_BeginUpdatePasswordByEmail(AsyncCallback callback, object state, string _szEmail, string _szDevice, Location _location);
      int End_BeginUpdatePasswordByEmail(IAsyncResult asyncResult);
      #endif
      int UpdatePasswordByEmail(string _szEmail, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdatePasswordByEmail(AsyncCallback callback, object state, string _szEmail, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location);
      int End_UpdatePasswordByEmail(IAsyncResult asyncResult);
      #endif
      void UpdatePersonalInfo(string _uHandle, PersonalInfo _psnInfo, string _szDevice, Location _location);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdatePersonalInfo(AsyncCallback callback, object state, string _uHandle, PersonalInfo _psnInfo, string _szDevice, Location _location);
      void End_UpdatePersonalInfo(IAsyncResult asyncResult);
      #endif
      int GetServerVersion();
      #if SILVERLIGHT
      IAsyncResult Begin_GetServerVersion(AsyncCallback callback, object state);
      int End_GetServerVersion(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetUp(AsyncCallback callback, object state, string _szEmail, string _szPhoneNumber, string _szPassword, string _szDevice, Location _location)
      {
        return send_SetUp(callback, state, _szEmail, _szPhoneNumber, _szPassword, _szDevice, _location);
      }

      public string End_SetUp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetUp();
      }

      #endif

      public string SetUp(string _szEmail, string _szPhoneNumber, string _szPassword, string _szDevice, Location _location)
      {
        #if !SILVERLIGHT
        send_SetUp(_szEmail, _szPhoneNumber, _szPassword, _szDevice, _location);
        return recv_SetUp();

        #else
        var asyncResult = Begin_SetUp(null, null, _szEmail, _szPhoneNumber, _szPassword, _szDevice, _location);
        return End_SetUp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetUp(AsyncCallback callback, object state, string _szEmail, string _szPhoneNumber, string _szPassword, string _szDevice, Location _location)
      #else
      public void send_SetUp(string _szEmail, string _szPhoneNumber, string _szPassword, string _szDevice, Location _location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetUp", TMessageType.Call, seqid_));
        SetUp_args args = new SetUp_args();
        args._szEmail = _szEmail;
        args._szPhoneNumber = _szPhoneNumber;
        args._szPassword = _szPassword;
        args._szDevice = _szDevice;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SetUp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetUp_result result = new SetUp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetUp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_BeginBindPhoneNumber(AsyncCallback callback, object state, string _uHandle, string _szPhoneNumber, string _szDevice, Location _location)
      {
        return send_BeginBindPhoneNumber(callback, state, _uHandle, _szPhoneNumber, _szDevice, _location);
      }

      public void End_BeginBindPhoneNumber(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_BeginBindPhoneNumber();
      }

      #endif

      public void BeginBindPhoneNumber(string _uHandle, string _szPhoneNumber, string _szDevice, Location _location)
      {
        #if !SILVERLIGHT
        send_BeginBindPhoneNumber(_uHandle, _szPhoneNumber, _szDevice, _location);
        recv_BeginBindPhoneNumber();

        #else
        var asyncResult = Begin_BeginBindPhoneNumber(null, null, _uHandle, _szPhoneNumber, _szDevice, _location);
        End_BeginBindPhoneNumber(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BeginBindPhoneNumber(AsyncCallback callback, object state, string _uHandle, string _szPhoneNumber, string _szDevice, Location _location)
      #else
      public void send_BeginBindPhoneNumber(string _uHandle, string _szPhoneNumber, string _szDevice, Location _location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BeginBindPhoneNumber", TMessageType.Call, seqid_));
        BeginBindPhoneNumber_args args = new BeginBindPhoneNumber_args();
        args._uHandle = _uHandle;
        args._szPhoneNumber = _szPhoneNumber;
        args._szDevice = _szDevice;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_BeginBindPhoneNumber()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BeginBindPhoneNumber_result result = new BeginBindPhoneNumber_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_BindPhoneNumber(AsyncCallback callback, object state, string _uHandle, string _szPhoneNumber, int _iIdentifyCode, string _szDevice, Location _location)
      {
        return send_BindPhoneNumber(callback, state, _uHandle, _szPhoneNumber, _iIdentifyCode, _szDevice, _location);
      }

      public int End_BindPhoneNumber(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BindPhoneNumber();
      }

      #endif

      public int BindPhoneNumber(string _uHandle, string _szPhoneNumber, int _iIdentifyCode, string _szDevice, Location _location)
      {
        #if !SILVERLIGHT
        send_BindPhoneNumber(_uHandle, _szPhoneNumber, _iIdentifyCode, _szDevice, _location);
        return recv_BindPhoneNumber();

        #else
        var asyncResult = Begin_BindPhoneNumber(null, null, _uHandle, _szPhoneNumber, _iIdentifyCode, _szDevice, _location);
        return End_BindPhoneNumber(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BindPhoneNumber(AsyncCallback callback, object state, string _uHandle, string _szPhoneNumber, int _iIdentifyCode, string _szDevice, Location _location)
      #else
      public void send_BindPhoneNumber(string _uHandle, string _szPhoneNumber, int _iIdentifyCode, string _szDevice, Location _location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BindPhoneNumber", TMessageType.Call, seqid_));
        BindPhoneNumber_args args = new BindPhoneNumber_args();
        args._uHandle = _uHandle;
        args._szPhoneNumber = _szPhoneNumber;
        args._iIdentifyCode = _iIdentifyCode;
        args._szDevice = _szDevice;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_BindPhoneNumber()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BindPhoneNumber_result result = new BindPhoneNumber_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BindPhoneNumber failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdatePassword(AsyncCallback callback, object state, string _uHandle, string _szNewPassword, string _szOldPassword, string _szDevice, Location _location)
      {
        return send_UpdatePassword(callback, state, _uHandle, _szNewPassword, _szOldPassword, _szDevice, _location);
      }

      public int End_UpdatePassword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdatePassword();
      }

      #endif

      public int UpdatePassword(string _uHandle, string _szNewPassword, string _szOldPassword, string _szDevice, Location _location)
      {
        #if !SILVERLIGHT
        send_UpdatePassword(_uHandle, _szNewPassword, _szOldPassword, _szDevice, _location);
        return recv_UpdatePassword();

        #else
        var asyncResult = Begin_UpdatePassword(null, null, _uHandle, _szNewPassword, _szOldPassword, _szDevice, _location);
        return End_UpdatePassword(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdatePassword(AsyncCallback callback, object state, string _uHandle, string _szNewPassword, string _szOldPassword, string _szDevice, Location _location)
      #else
      public void send_UpdatePassword(string _uHandle, string _szNewPassword, string _szOldPassword, string _szDevice, Location _location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdatePassword", TMessageType.Call, seqid_));
        UpdatePassword_args args = new UpdatePassword_args();
        args._uHandle = _uHandle;
        args._szNewPassword = _szNewPassword;
        args._szOldPassword = _szOldPassword;
        args._szDevice = _szDevice;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_UpdatePassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdatePassword_result result = new UpdatePassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdatePassword failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_BeginUpdatePasswordByPhone(AsyncCallback callback, object state, string _szPhoneNumber, string _szDevice, Location _location)
      {
        return send_BeginUpdatePasswordByPhone(callback, state, _szPhoneNumber, _szDevice, _location);
      }

      public int End_BeginUpdatePasswordByPhone(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BeginUpdatePasswordByPhone();
      }

      #endif

      public int BeginUpdatePasswordByPhone(string _szPhoneNumber, string _szDevice, Location _location)
      {
        #if !SILVERLIGHT
        send_BeginUpdatePasswordByPhone(_szPhoneNumber, _szDevice, _location);
        return recv_BeginUpdatePasswordByPhone();

        #else
        var asyncResult = Begin_BeginUpdatePasswordByPhone(null, null, _szPhoneNumber, _szDevice, _location);
        return End_BeginUpdatePasswordByPhone(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BeginUpdatePasswordByPhone(AsyncCallback callback, object state, string _szPhoneNumber, string _szDevice, Location _location)
      #else
      public void send_BeginUpdatePasswordByPhone(string _szPhoneNumber, string _szDevice, Location _location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BeginUpdatePasswordByPhone", TMessageType.Call, seqid_));
        BeginUpdatePasswordByPhone_args args = new BeginUpdatePasswordByPhone_args();
        args._szPhoneNumber = _szPhoneNumber;
        args._szDevice = _szDevice;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_BeginUpdatePasswordByPhone()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BeginUpdatePasswordByPhone_result result = new BeginUpdatePasswordByPhone_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BeginUpdatePasswordByPhone failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdatePasswordByPhone(AsyncCallback callback, object state, string _szPhoneNumber, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location)
      {
        return send_UpdatePasswordByPhone(callback, state, _szPhoneNumber, _szNewPassword, _iIdentifyCode, _szDevice, _location);
      }

      public int End_UpdatePasswordByPhone(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdatePasswordByPhone();
      }

      #endif

      public int UpdatePasswordByPhone(string _szPhoneNumber, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location)
      {
        #if !SILVERLIGHT
        send_UpdatePasswordByPhone(_szPhoneNumber, _szNewPassword, _iIdentifyCode, _szDevice, _location);
        return recv_UpdatePasswordByPhone();

        #else
        var asyncResult = Begin_UpdatePasswordByPhone(null, null, _szPhoneNumber, _szNewPassword, _iIdentifyCode, _szDevice, _location);
        return End_UpdatePasswordByPhone(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdatePasswordByPhone(AsyncCallback callback, object state, string _szPhoneNumber, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location)
      #else
      public void send_UpdatePasswordByPhone(string _szPhoneNumber, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdatePasswordByPhone", TMessageType.Call, seqid_));
        UpdatePasswordByPhone_args args = new UpdatePasswordByPhone_args();
        args._szPhoneNumber = _szPhoneNumber;
        args._szNewPassword = _szNewPassword;
        args._iIdentifyCode = _iIdentifyCode;
        args._szDevice = _szDevice;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_UpdatePasswordByPhone()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdatePasswordByPhone_result result = new UpdatePasswordByPhone_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdatePasswordByPhone failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_BeginUpdatePasswordByEmail(AsyncCallback callback, object state, string _szEmail, string _szDevice, Location _location)
      {
        return send_BeginUpdatePasswordByEmail(callback, state, _szEmail, _szDevice, _location);
      }

      public int End_BeginUpdatePasswordByEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BeginUpdatePasswordByEmail();
      }

      #endif

      public int BeginUpdatePasswordByEmail(string _szEmail, string _szDevice, Location _location)
      {
        #if !SILVERLIGHT
        send_BeginUpdatePasswordByEmail(_szEmail, _szDevice, _location);
        return recv_BeginUpdatePasswordByEmail();

        #else
        var asyncResult = Begin_BeginUpdatePasswordByEmail(null, null, _szEmail, _szDevice, _location);
        return End_BeginUpdatePasswordByEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BeginUpdatePasswordByEmail(AsyncCallback callback, object state, string _szEmail, string _szDevice, Location _location)
      #else
      public void send_BeginUpdatePasswordByEmail(string _szEmail, string _szDevice, Location _location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BeginUpdatePasswordByEmail", TMessageType.Call, seqid_));
        BeginUpdatePasswordByEmail_args args = new BeginUpdatePasswordByEmail_args();
        args._szEmail = _szEmail;
        args._szDevice = _szDevice;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_BeginUpdatePasswordByEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BeginUpdatePasswordByEmail_result result = new BeginUpdatePasswordByEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BeginUpdatePasswordByEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdatePasswordByEmail(AsyncCallback callback, object state, string _szEmail, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location)
      {
        return send_UpdatePasswordByEmail(callback, state, _szEmail, _szNewPassword, _iIdentifyCode, _szDevice, _location);
      }

      public int End_UpdatePasswordByEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdatePasswordByEmail();
      }

      #endif

      public int UpdatePasswordByEmail(string _szEmail, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location)
      {
        #if !SILVERLIGHT
        send_UpdatePasswordByEmail(_szEmail, _szNewPassword, _iIdentifyCode, _szDevice, _location);
        return recv_UpdatePasswordByEmail();

        #else
        var asyncResult = Begin_UpdatePasswordByEmail(null, null, _szEmail, _szNewPassword, _iIdentifyCode, _szDevice, _location);
        return End_UpdatePasswordByEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdatePasswordByEmail(AsyncCallback callback, object state, string _szEmail, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location)
      #else
      public void send_UpdatePasswordByEmail(string _szEmail, string _szNewPassword, int _iIdentifyCode, string _szDevice, Location _location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdatePasswordByEmail", TMessageType.Call, seqid_));
        UpdatePasswordByEmail_args args = new UpdatePasswordByEmail_args();
        args._szEmail = _szEmail;
        args._szNewPassword = _szNewPassword;
        args._iIdentifyCode = _iIdentifyCode;
        args._szDevice = _szDevice;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_UpdatePasswordByEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdatePasswordByEmail_result result = new UpdatePasswordByEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdatePasswordByEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdatePersonalInfo(AsyncCallback callback, object state, string _uHandle, PersonalInfo _psnInfo, string _szDevice, Location _location)
      {
        return send_UpdatePersonalInfo(callback, state, _uHandle, _psnInfo, _szDevice, _location);
      }

      public void End_UpdatePersonalInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UpdatePersonalInfo();
      }

      #endif

      public void UpdatePersonalInfo(string _uHandle, PersonalInfo _psnInfo, string _szDevice, Location _location)
      {
        #if !SILVERLIGHT
        send_UpdatePersonalInfo(_uHandle, _psnInfo, _szDevice, _location);
        recv_UpdatePersonalInfo();

        #else
        var asyncResult = Begin_UpdatePersonalInfo(null, null, _uHandle, _psnInfo, _szDevice, _location);
        End_UpdatePersonalInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdatePersonalInfo(AsyncCallback callback, object state, string _uHandle, PersonalInfo _psnInfo, string _szDevice, Location _location)
      #else
      public void send_UpdatePersonalInfo(string _uHandle, PersonalInfo _psnInfo, string _szDevice, Location _location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdatePersonalInfo", TMessageType.Call, seqid_));
        UpdatePersonalInfo_args args = new UpdatePersonalInfo_args();
        args._uHandle = _uHandle;
        args._psnInfo = _psnInfo;
        args._szDevice = _szDevice;
        args._location = _location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_UpdatePersonalInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdatePersonalInfo_result result = new UpdatePersonalInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetServerVersion(AsyncCallback callback, object state)
      {
        return send_GetServerVersion(callback, state);
      }

      public int End_GetServerVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetServerVersion();
      }

      #endif

      public int GetServerVersion()
      {
        #if !SILVERLIGHT
        send_GetServerVersion();
        return recv_GetServerVersion();

        #else
        var asyncResult = Begin_GetServerVersion(null, null);
        return End_GetServerVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetServerVersion(AsyncCallback callback, object state)
      #else
      public void send_GetServerVersion()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetServerVersion", TMessageType.Call, seqid_));
        GetServerVersion_args args = new GetServerVersion_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_GetServerVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetServerVersion_result result = new GetServerVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetServerVersion failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["SetUp"] = SetUp_Process;
        processMap_["BeginBindPhoneNumber"] = BeginBindPhoneNumber_Process;
        processMap_["BindPhoneNumber"] = BindPhoneNumber_Process;
        processMap_["UpdatePassword"] = UpdatePassword_Process;
        processMap_["BeginUpdatePasswordByPhone"] = BeginUpdatePasswordByPhone_Process;
        processMap_["UpdatePasswordByPhone"] = UpdatePasswordByPhone_Process;
        processMap_["BeginUpdatePasswordByEmail"] = BeginUpdatePasswordByEmail_Process;
        processMap_["UpdatePasswordByEmail"] = UpdatePasswordByEmail_Process;
        processMap_["UpdatePersonalInfo"] = UpdatePersonalInfo_Process;
        processMap_["GetServerVersion"] = GetServerVersion_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void SetUp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetUp_args args = new SetUp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetUp_result result = new SetUp_result();
        result.Success = iface_.SetUp(args._szEmail, args._szPhoneNumber, args._szPassword, args._szDevice, args._location);
        oprot.WriteMessageBegin(new TMessage("SetUp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BeginBindPhoneNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BeginBindPhoneNumber_args args = new BeginBindPhoneNumber_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BeginBindPhoneNumber_result result = new BeginBindPhoneNumber_result();
        iface_.BeginBindPhoneNumber(args._uHandle, args._szPhoneNumber, args._szDevice, args._location);
        oprot.WriteMessageBegin(new TMessage("BeginBindPhoneNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BindPhoneNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BindPhoneNumber_args args = new BindPhoneNumber_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BindPhoneNumber_result result = new BindPhoneNumber_result();
        result.Success = iface_.BindPhoneNumber(args._uHandle, args._szPhoneNumber, args._iIdentifyCode, args._szDevice, args._location);
        oprot.WriteMessageBegin(new TMessage("BindPhoneNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdatePassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdatePassword_args args = new UpdatePassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdatePassword_result result = new UpdatePassword_result();
        result.Success = iface_.UpdatePassword(args._uHandle, args._szNewPassword, args._szOldPassword, args._szDevice, args._location);
        oprot.WriteMessageBegin(new TMessage("UpdatePassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BeginUpdatePasswordByPhone_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BeginUpdatePasswordByPhone_args args = new BeginUpdatePasswordByPhone_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BeginUpdatePasswordByPhone_result result = new BeginUpdatePasswordByPhone_result();
        result.Success = iface_.BeginUpdatePasswordByPhone(args._szPhoneNumber, args._szDevice, args._location);
        oprot.WriteMessageBegin(new TMessage("BeginUpdatePasswordByPhone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdatePasswordByPhone_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdatePasswordByPhone_args args = new UpdatePasswordByPhone_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdatePasswordByPhone_result result = new UpdatePasswordByPhone_result();
        result.Success = iface_.UpdatePasswordByPhone(args._szPhoneNumber, args._szNewPassword, args._iIdentifyCode, args._szDevice, args._location);
        oprot.WriteMessageBegin(new TMessage("UpdatePasswordByPhone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void BeginUpdatePasswordByEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BeginUpdatePasswordByEmail_args args = new BeginUpdatePasswordByEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BeginUpdatePasswordByEmail_result result = new BeginUpdatePasswordByEmail_result();
        result.Success = iface_.BeginUpdatePasswordByEmail(args._szEmail, args._szDevice, args._location);
        oprot.WriteMessageBegin(new TMessage("BeginUpdatePasswordByEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdatePasswordByEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdatePasswordByEmail_args args = new UpdatePasswordByEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdatePasswordByEmail_result result = new UpdatePasswordByEmail_result();
        result.Success = iface_.UpdatePasswordByEmail(args._szEmail, args._szNewPassword, args._iIdentifyCode, args._szDevice, args._location);
        oprot.WriteMessageBegin(new TMessage("UpdatePasswordByEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdatePersonalInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdatePersonalInfo_args args = new UpdatePersonalInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdatePersonalInfo_result result = new UpdatePersonalInfo_result();
        iface_.UpdatePersonalInfo(args._uHandle, args._psnInfo, args._szDevice, args._location);
        oprot.WriteMessageBegin(new TMessage("UpdatePersonalInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetServerVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetServerVersion_args args = new GetServerVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetServerVersion_result result = new GetServerVersion_result();
        result.Success = iface_.GetServerVersion();
        oprot.WriteMessageBegin(new TMessage("GetServerVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetUp_args : TBase
    {
      private string __szEmail;
      private string __szPhoneNumber;
      private string __szPassword;
      private string __szDevice;
      private Location __location;

      public string _szEmail
      {
        get
        {
          return __szEmail;
        }
        set
        {
          __isset._szEmail = true;
          this.__szEmail = value;
        }
      }

      public string _szPhoneNumber
      {
        get
        {
          return __szPhoneNumber;
        }
        set
        {
          __isset._szPhoneNumber = true;
          this.__szPhoneNumber = value;
        }
      }

      public string _szPassword
      {
        get
        {
          return __szPassword;
        }
        set
        {
          __isset._szPassword = true;
          this.__szPassword = value;
        }
      }

      public string _szDevice
      {
        get
        {
          return __szDevice;
        }
        set
        {
          __isset._szDevice = true;
          this.__szDevice = value;
        }
      }

      public Location _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _szEmail;
        public bool _szPhoneNumber;
        public bool _szPassword;
        public bool _szDevice;
        public bool _location;
      }

      public SetUp_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _szEmail = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  _szPhoneNumber = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  _szPassword = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  _szDevice = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Struct) {
                  _location = new Location();
                  _location.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetUp_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_szEmail != null && __isset._szEmail) {
            field.Name = "_szEmail";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szEmail);
            oprot.WriteFieldEnd();
          }
          if (_szPhoneNumber != null && __isset._szPhoneNumber) {
            field.Name = "_szPhoneNumber";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szPhoneNumber);
            oprot.WriteFieldEnd();
          }
          if (_szPassword != null && __isset._szPassword) {
            field.Name = "_szPassword";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szPassword);
            oprot.WriteFieldEnd();
          }
          if (_szDevice != null && __isset._szDevice) {
            field.Name = "_szDevice";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szDevice);
            oprot.WriteFieldEnd();
          }
          if (_location != null && __isset._location) {
            field.Name = "_location";
            field.Type = TType.Struct;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            _location.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetUp_args(");
        bool __first = true;
        if (_szEmail != null && __isset._szEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szEmail: ");
          __sb.Append(_szEmail);
        }
        if (_szPhoneNumber != null && __isset._szPhoneNumber) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szPhoneNumber: ");
          __sb.Append(_szPhoneNumber);
        }
        if (_szPassword != null && __isset._szPassword) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szPassword: ");
          __sb.Append(_szPassword);
        }
        if (_szDevice != null && __isset._szDevice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szDevice: ");
          __sb.Append(_szDevice);
        }
        if (_location != null && __isset._location) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_location: ");
          __sb.Append(_location== null ? "<null>" : _location.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetUp_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SetUp_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetUp_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetUp_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BeginBindPhoneNumber_args : TBase
    {
      private string __uHandle;
      private string __szPhoneNumber;
      private string __szDevice;
      private Location __location;

      public string _uHandle
      {
        get
        {
          return __uHandle;
        }
        set
        {
          __isset._uHandle = true;
          this.__uHandle = value;
        }
      }

      public string _szPhoneNumber
      {
        get
        {
          return __szPhoneNumber;
        }
        set
        {
          __isset._szPhoneNumber = true;
          this.__szPhoneNumber = value;
        }
      }

      public string _szDevice
      {
        get
        {
          return __szDevice;
        }
        set
        {
          __isset._szDevice = true;
          this.__szDevice = value;
        }
      }

      public Location _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _uHandle;
        public bool _szPhoneNumber;
        public bool _szDevice;
        public bool _location;
      }

      public BeginBindPhoneNumber_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _uHandle = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  _szPhoneNumber = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  _szDevice = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  _location = new Location();
                  _location.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BeginBindPhoneNumber_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_uHandle != null && __isset._uHandle) {
            field.Name = "_uHandle";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_uHandle);
            oprot.WriteFieldEnd();
          }
          if (_szPhoneNumber != null && __isset._szPhoneNumber) {
            field.Name = "_szPhoneNumber";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szPhoneNumber);
            oprot.WriteFieldEnd();
          }
          if (_szDevice != null && __isset._szDevice) {
            field.Name = "_szDevice";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szDevice);
            oprot.WriteFieldEnd();
          }
          if (_location != null && __isset._location) {
            field.Name = "_location";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            _location.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BeginBindPhoneNumber_args(");
        bool __first = true;
        if (_uHandle != null && __isset._uHandle) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_uHandle: ");
          __sb.Append(_uHandle);
        }
        if (_szPhoneNumber != null && __isset._szPhoneNumber) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szPhoneNumber: ");
          __sb.Append(_szPhoneNumber);
        }
        if (_szDevice != null && __isset._szDevice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szDevice: ");
          __sb.Append(_szDevice);
        }
        if (_location != null && __isset._location) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_location: ");
          __sb.Append(_location== null ? "<null>" : _location.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BeginBindPhoneNumber_result : TBase
    {

      public BeginBindPhoneNumber_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BeginBindPhoneNumber_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BeginBindPhoneNumber_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BindPhoneNumber_args : TBase
    {
      private string __uHandle;
      private string __szPhoneNumber;
      private int __iIdentifyCode;
      private string __szDevice;
      private Location __location;

      public string _uHandle
      {
        get
        {
          return __uHandle;
        }
        set
        {
          __isset._uHandle = true;
          this.__uHandle = value;
        }
      }

      public string _szPhoneNumber
      {
        get
        {
          return __szPhoneNumber;
        }
        set
        {
          __isset._szPhoneNumber = true;
          this.__szPhoneNumber = value;
        }
      }

      public int _iIdentifyCode
      {
        get
        {
          return __iIdentifyCode;
        }
        set
        {
          __isset._iIdentifyCode = true;
          this.__iIdentifyCode = value;
        }
      }

      public string _szDevice
      {
        get
        {
          return __szDevice;
        }
        set
        {
          __isset._szDevice = true;
          this.__szDevice = value;
        }
      }

      public Location _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _uHandle;
        public bool _szPhoneNumber;
        public bool _iIdentifyCode;
        public bool _szDevice;
        public bool _location;
      }

      public BindPhoneNumber_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _uHandle = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  _szPhoneNumber = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  _iIdentifyCode = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  _szDevice = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Struct) {
                  _location = new Location();
                  _location.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BindPhoneNumber_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_uHandle != null && __isset._uHandle) {
            field.Name = "_uHandle";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_uHandle);
            oprot.WriteFieldEnd();
          }
          if (_szPhoneNumber != null && __isset._szPhoneNumber) {
            field.Name = "_szPhoneNumber";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szPhoneNumber);
            oprot.WriteFieldEnd();
          }
          if (__isset._iIdentifyCode) {
            field.Name = "_iIdentifyCode";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(_iIdentifyCode);
            oprot.WriteFieldEnd();
          }
          if (_szDevice != null && __isset._szDevice) {
            field.Name = "_szDevice";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szDevice);
            oprot.WriteFieldEnd();
          }
          if (_location != null && __isset._location) {
            field.Name = "_location";
            field.Type = TType.Struct;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            _location.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BindPhoneNumber_args(");
        bool __first = true;
        if (_uHandle != null && __isset._uHandle) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_uHandle: ");
          __sb.Append(_uHandle);
        }
        if (_szPhoneNumber != null && __isset._szPhoneNumber) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szPhoneNumber: ");
          __sb.Append(_szPhoneNumber);
        }
        if (__isset._iIdentifyCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_iIdentifyCode: ");
          __sb.Append(_iIdentifyCode);
        }
        if (_szDevice != null && __isset._szDevice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szDevice: ");
          __sb.Append(_szDevice);
        }
        if (_location != null && __isset._location) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_location: ");
          __sb.Append(_location== null ? "<null>" : _location.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BindPhoneNumber_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BindPhoneNumber_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BindPhoneNumber_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BindPhoneNumber_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdatePassword_args : TBase
    {
      private string __uHandle;
      private string __szNewPassword;
      private string __szOldPassword;
      private string __szDevice;
      private Location __location;

      public string _uHandle
      {
        get
        {
          return __uHandle;
        }
        set
        {
          __isset._uHandle = true;
          this.__uHandle = value;
        }
      }

      public string _szNewPassword
      {
        get
        {
          return __szNewPassword;
        }
        set
        {
          __isset._szNewPassword = true;
          this.__szNewPassword = value;
        }
      }

      public string _szOldPassword
      {
        get
        {
          return __szOldPassword;
        }
        set
        {
          __isset._szOldPassword = true;
          this.__szOldPassword = value;
        }
      }

      public string _szDevice
      {
        get
        {
          return __szDevice;
        }
        set
        {
          __isset._szDevice = true;
          this.__szDevice = value;
        }
      }

      public Location _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _uHandle;
        public bool _szNewPassword;
        public bool _szOldPassword;
        public bool _szDevice;
        public bool _location;
      }

      public UpdatePassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _uHandle = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  _szNewPassword = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  _szOldPassword = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  _szDevice = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Struct) {
                  _location = new Location();
                  _location.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdatePassword_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_uHandle != null && __isset._uHandle) {
            field.Name = "_uHandle";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_uHandle);
            oprot.WriteFieldEnd();
          }
          if (_szNewPassword != null && __isset._szNewPassword) {
            field.Name = "_szNewPassword";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szNewPassword);
            oprot.WriteFieldEnd();
          }
          if (_szOldPassword != null && __isset._szOldPassword) {
            field.Name = "_szOldPassword";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szOldPassword);
            oprot.WriteFieldEnd();
          }
          if (_szDevice != null && __isset._szDevice) {
            field.Name = "_szDevice";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szDevice);
            oprot.WriteFieldEnd();
          }
          if (_location != null && __isset._location) {
            field.Name = "_location";
            field.Type = TType.Struct;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            _location.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdatePassword_args(");
        bool __first = true;
        if (_uHandle != null && __isset._uHandle) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_uHandle: ");
          __sb.Append(_uHandle);
        }
        if (_szNewPassword != null && __isset._szNewPassword) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szNewPassword: ");
          __sb.Append(_szNewPassword);
        }
        if (_szOldPassword != null && __isset._szOldPassword) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szOldPassword: ");
          __sb.Append(_szOldPassword);
        }
        if (_szDevice != null && __isset._szDevice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szDevice: ");
          __sb.Append(_szDevice);
        }
        if (_location != null && __isset._location) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_location: ");
          __sb.Append(_location== null ? "<null>" : _location.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdatePassword_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdatePassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdatePassword_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdatePassword_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BeginUpdatePasswordByPhone_args : TBase
    {
      private string __szPhoneNumber;
      private string __szDevice;
      private Location __location;

      public string _szPhoneNumber
      {
        get
        {
          return __szPhoneNumber;
        }
        set
        {
          __isset._szPhoneNumber = true;
          this.__szPhoneNumber = value;
        }
      }

      public string _szDevice
      {
        get
        {
          return __szDevice;
        }
        set
        {
          __isset._szDevice = true;
          this.__szDevice = value;
        }
      }

      public Location _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _szPhoneNumber;
        public bool _szDevice;
        public bool _location;
      }

      public BeginUpdatePasswordByPhone_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _szPhoneNumber = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  _szDevice = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  _location = new Location();
                  _location.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BeginUpdatePasswordByPhone_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_szPhoneNumber != null && __isset._szPhoneNumber) {
            field.Name = "_szPhoneNumber";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szPhoneNumber);
            oprot.WriteFieldEnd();
          }
          if (_szDevice != null && __isset._szDevice) {
            field.Name = "_szDevice";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szDevice);
            oprot.WriteFieldEnd();
          }
          if (_location != null && __isset._location) {
            field.Name = "_location";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            _location.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BeginUpdatePasswordByPhone_args(");
        bool __first = true;
        if (_szPhoneNumber != null && __isset._szPhoneNumber) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szPhoneNumber: ");
          __sb.Append(_szPhoneNumber);
        }
        if (_szDevice != null && __isset._szDevice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szDevice: ");
          __sb.Append(_szDevice);
        }
        if (_location != null && __isset._location) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_location: ");
          __sb.Append(_location== null ? "<null>" : _location.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BeginUpdatePasswordByPhone_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BeginUpdatePasswordByPhone_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BeginUpdatePasswordByPhone_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BeginUpdatePasswordByPhone_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdatePasswordByPhone_args : TBase
    {
      private string __szPhoneNumber;
      private string __szNewPassword;
      private int __iIdentifyCode;
      private string __szDevice;
      private Location __location;

      public string _szPhoneNumber
      {
        get
        {
          return __szPhoneNumber;
        }
        set
        {
          __isset._szPhoneNumber = true;
          this.__szPhoneNumber = value;
        }
      }

      public string _szNewPassword
      {
        get
        {
          return __szNewPassword;
        }
        set
        {
          __isset._szNewPassword = true;
          this.__szNewPassword = value;
        }
      }

      public int _iIdentifyCode
      {
        get
        {
          return __iIdentifyCode;
        }
        set
        {
          __isset._iIdentifyCode = true;
          this.__iIdentifyCode = value;
        }
      }

      public string _szDevice
      {
        get
        {
          return __szDevice;
        }
        set
        {
          __isset._szDevice = true;
          this.__szDevice = value;
        }
      }

      public Location _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _szPhoneNumber;
        public bool _szNewPassword;
        public bool _iIdentifyCode;
        public bool _szDevice;
        public bool _location;
      }

      public UpdatePasswordByPhone_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _szPhoneNumber = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  _szNewPassword = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  _iIdentifyCode = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  _szDevice = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Struct) {
                  _location = new Location();
                  _location.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdatePasswordByPhone_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_szPhoneNumber != null && __isset._szPhoneNumber) {
            field.Name = "_szPhoneNumber";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szPhoneNumber);
            oprot.WriteFieldEnd();
          }
          if (_szNewPassword != null && __isset._szNewPassword) {
            field.Name = "_szNewPassword";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szNewPassword);
            oprot.WriteFieldEnd();
          }
          if (__isset._iIdentifyCode) {
            field.Name = "_iIdentifyCode";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(_iIdentifyCode);
            oprot.WriteFieldEnd();
          }
          if (_szDevice != null && __isset._szDevice) {
            field.Name = "_szDevice";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szDevice);
            oprot.WriteFieldEnd();
          }
          if (_location != null && __isset._location) {
            field.Name = "_location";
            field.Type = TType.Struct;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            _location.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdatePasswordByPhone_args(");
        bool __first = true;
        if (_szPhoneNumber != null && __isset._szPhoneNumber) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szPhoneNumber: ");
          __sb.Append(_szPhoneNumber);
        }
        if (_szNewPassword != null && __isset._szNewPassword) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szNewPassword: ");
          __sb.Append(_szNewPassword);
        }
        if (__isset._iIdentifyCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_iIdentifyCode: ");
          __sb.Append(_iIdentifyCode);
        }
        if (_szDevice != null && __isset._szDevice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szDevice: ");
          __sb.Append(_szDevice);
        }
        if (_location != null && __isset._location) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_location: ");
          __sb.Append(_location== null ? "<null>" : _location.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdatePasswordByPhone_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdatePasswordByPhone_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdatePasswordByPhone_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdatePasswordByPhone_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BeginUpdatePasswordByEmail_args : TBase
    {
      private string __szEmail;
      private string __szDevice;
      private Location __location;

      public string _szEmail
      {
        get
        {
          return __szEmail;
        }
        set
        {
          __isset._szEmail = true;
          this.__szEmail = value;
        }
      }

      public string _szDevice
      {
        get
        {
          return __szDevice;
        }
        set
        {
          __isset._szDevice = true;
          this.__szDevice = value;
        }
      }

      public Location _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _szEmail;
        public bool _szDevice;
        public bool _location;
      }

      public BeginUpdatePasswordByEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _szEmail = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  _szDevice = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  _location = new Location();
                  _location.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BeginUpdatePasswordByEmail_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_szEmail != null && __isset._szEmail) {
            field.Name = "_szEmail";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szEmail);
            oprot.WriteFieldEnd();
          }
          if (_szDevice != null && __isset._szDevice) {
            field.Name = "_szDevice";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szDevice);
            oprot.WriteFieldEnd();
          }
          if (_location != null && __isset._location) {
            field.Name = "_location";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            _location.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BeginUpdatePasswordByEmail_args(");
        bool __first = true;
        if (_szEmail != null && __isset._szEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szEmail: ");
          __sb.Append(_szEmail);
        }
        if (_szDevice != null && __isset._szDevice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szDevice: ");
          __sb.Append(_szDevice);
        }
        if (_location != null && __isset._location) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_location: ");
          __sb.Append(_location== null ? "<null>" : _location.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BeginUpdatePasswordByEmail_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BeginUpdatePasswordByEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BeginUpdatePasswordByEmail_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BeginUpdatePasswordByEmail_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdatePasswordByEmail_args : TBase
    {
      private string __szEmail;
      private string __szNewPassword;
      private int __iIdentifyCode;
      private string __szDevice;
      private Location __location;

      public string _szEmail
      {
        get
        {
          return __szEmail;
        }
        set
        {
          __isset._szEmail = true;
          this.__szEmail = value;
        }
      }

      public string _szNewPassword
      {
        get
        {
          return __szNewPassword;
        }
        set
        {
          __isset._szNewPassword = true;
          this.__szNewPassword = value;
        }
      }

      public int _iIdentifyCode
      {
        get
        {
          return __iIdentifyCode;
        }
        set
        {
          __isset._iIdentifyCode = true;
          this.__iIdentifyCode = value;
        }
      }

      public string _szDevice
      {
        get
        {
          return __szDevice;
        }
        set
        {
          __isset._szDevice = true;
          this.__szDevice = value;
        }
      }

      public Location _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _szEmail;
        public bool _szNewPassword;
        public bool _iIdentifyCode;
        public bool _szDevice;
        public bool _location;
      }

      public UpdatePasswordByEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _szEmail = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  _szNewPassword = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  _iIdentifyCode = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  _szDevice = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Struct) {
                  _location = new Location();
                  _location.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdatePasswordByEmail_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_szEmail != null && __isset._szEmail) {
            field.Name = "_szEmail";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szEmail);
            oprot.WriteFieldEnd();
          }
          if (_szNewPassword != null && __isset._szNewPassword) {
            field.Name = "_szNewPassword";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szNewPassword);
            oprot.WriteFieldEnd();
          }
          if (__isset._iIdentifyCode) {
            field.Name = "_iIdentifyCode";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(_iIdentifyCode);
            oprot.WriteFieldEnd();
          }
          if (_szDevice != null && __isset._szDevice) {
            field.Name = "_szDevice";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szDevice);
            oprot.WriteFieldEnd();
          }
          if (_location != null && __isset._location) {
            field.Name = "_location";
            field.Type = TType.Struct;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            _location.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdatePasswordByEmail_args(");
        bool __first = true;
        if (_szEmail != null && __isset._szEmail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szEmail: ");
          __sb.Append(_szEmail);
        }
        if (_szNewPassword != null && __isset._szNewPassword) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szNewPassword: ");
          __sb.Append(_szNewPassword);
        }
        if (__isset._iIdentifyCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_iIdentifyCode: ");
          __sb.Append(_iIdentifyCode);
        }
        if (_szDevice != null && __isset._szDevice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szDevice: ");
          __sb.Append(_szDevice);
        }
        if (_location != null && __isset._location) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_location: ");
          __sb.Append(_location== null ? "<null>" : _location.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdatePasswordByEmail_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdatePasswordByEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdatePasswordByEmail_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdatePasswordByEmail_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdatePersonalInfo_args : TBase
    {
      private string __uHandle;
      private PersonalInfo __psnInfo;
      private string __szDevice;
      private Location __location;

      public string _uHandle
      {
        get
        {
          return __uHandle;
        }
        set
        {
          __isset._uHandle = true;
          this.__uHandle = value;
        }
      }

      public PersonalInfo _psnInfo
      {
        get
        {
          return __psnInfo;
        }
        set
        {
          __isset._psnInfo = true;
          this.__psnInfo = value;
        }
      }

      public string _szDevice
      {
        get
        {
          return __szDevice;
        }
        set
        {
          __isset._szDevice = true;
          this.__szDevice = value;
        }
      }

      public Location _location
      {
        get
        {
          return __location;
        }
        set
        {
          __isset._location = true;
          this.__location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _uHandle;
        public bool _psnInfo;
        public bool _szDevice;
        public bool _location;
      }

      public UpdatePersonalInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  _uHandle = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  _psnInfo = new PersonalInfo();
                  _psnInfo.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  _szDevice = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  _location = new Location();
                  _location.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdatePersonalInfo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (_uHandle != null && __isset._uHandle) {
            field.Name = "_uHandle";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_uHandle);
            oprot.WriteFieldEnd();
          }
          if (_psnInfo != null && __isset._psnInfo) {
            field.Name = "_psnInfo";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            _psnInfo.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (_szDevice != null && __isset._szDevice) {
            field.Name = "_szDevice";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(_szDevice);
            oprot.WriteFieldEnd();
          }
          if (_location != null && __isset._location) {
            field.Name = "_location";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            _location.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdatePersonalInfo_args(");
        bool __first = true;
        if (_uHandle != null && __isset._uHandle) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_uHandle: ");
          __sb.Append(_uHandle);
        }
        if (_psnInfo != null && __isset._psnInfo) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_psnInfo: ");
          __sb.Append(_psnInfo== null ? "<null>" : _psnInfo.ToString());
        }
        if (_szDevice != null && __isset._szDevice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_szDevice: ");
          __sb.Append(_szDevice);
        }
        if (_location != null && __isset._location) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("_location: ");
          __sb.Append(_location== null ? "<null>" : _location.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdatePersonalInfo_result : TBase
    {

      public UpdatePersonalInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdatePersonalInfo_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdatePersonalInfo_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServerVersion_args : TBase
    {

      public GetServerVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetServerVersion_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetServerVersion_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetServerVersion_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetServerVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetServerVersion_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetServerVersion_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
