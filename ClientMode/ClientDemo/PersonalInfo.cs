/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Onepc.AppService
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PersonalInfo : TBase
  {
    private sbyte _Sex;
    private sbyte _Nation;
    private sbyte _Education;
    private short _Job;
    private string _Name;
    private string _BirthDate;
    private string _HomeTown;
    private string _IDCard;
    private string _Location;
    private string _College;
    private string _QQ;
    private string _WeChat;
    private string _RegistDate;
    private string _Sign;

    public sbyte Sex
    {
      get
      {
        return _Sex;
      }
      set
      {
        __isset.Sex = true;
        this._Sex = value;
      }
    }

    public sbyte Nation
    {
      get
      {
        return _Nation;
      }
      set
      {
        __isset.Nation = true;
        this._Nation = value;
      }
    }

    public sbyte Education
    {
      get
      {
        return _Education;
      }
      set
      {
        __isset.Education = true;
        this._Education = value;
      }
    }

    public short Job
    {
      get
      {
        return _Job;
      }
      set
      {
        __isset.Job = true;
        this._Job = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string BirthDate
    {
      get
      {
        return _BirthDate;
      }
      set
      {
        __isset.BirthDate = true;
        this._BirthDate = value;
      }
    }

    public string HomeTown
    {
      get
      {
        return _HomeTown;
      }
      set
      {
        __isset.HomeTown = true;
        this._HomeTown = value;
      }
    }

    public string IDCard
    {
      get
      {
        return _IDCard;
      }
      set
      {
        __isset.IDCard = true;
        this._IDCard = value;
      }
    }

    public string Location
    {
      get
      {
        return _Location;
      }
      set
      {
        __isset.Location = true;
        this._Location = value;
      }
    }

    public string College
    {
      get
      {
        return _College;
      }
      set
      {
        __isset.College = true;
        this._College = value;
      }
    }

    public string QQ
    {
      get
      {
        return _QQ;
      }
      set
      {
        __isset.QQ = true;
        this._QQ = value;
      }
    }

    public string WeChat
    {
      get
      {
        return _WeChat;
      }
      set
      {
        __isset.WeChat = true;
        this._WeChat = value;
      }
    }

    public string RegistDate
    {
      get
      {
        return _RegistDate;
      }
      set
      {
        __isset.RegistDate = true;
        this._RegistDate = value;
      }
    }

    public string Sign
    {
      get
      {
        return _Sign;
      }
      set
      {
        __isset.Sign = true;
        this._Sign = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Sex;
      public bool Nation;
      public bool Education;
      public bool Job;
      public bool Name;
      public bool BirthDate;
      public bool HomeTown;
      public bool IDCard;
      public bool Location;
      public bool College;
      public bool QQ;
      public bool WeChat;
      public bool RegistDate;
      public bool Sign;
    }

    public PersonalInfo() {
      this._Sex = -1;
      this.__isset.Sex = true;
      this._Nation = -1;
      this.__isset.Nation = true;
      this._Education = -1;
      this.__isset.Education = true;
      this._Job = -1;
      this.__isset.Job = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                Sex = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                Nation = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Byte) {
                Education = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I16) {
                Job = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                BirthDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                HomeTown = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                IDCard = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                College = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                QQ = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                WeChat = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                RegistDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                Sign = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PersonalInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Sex) {
          field.Name = "Sex";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Sex);
          oprot.WriteFieldEnd();
        }
        if (__isset.Nation) {
          field.Name = "Nation";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Nation);
          oprot.WriteFieldEnd();
        }
        if (__isset.Education) {
          field.Name = "Education";
          field.Type = TType.Byte;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Education);
          oprot.WriteFieldEnd();
        }
        if (__isset.Job) {
          field.Name = "Job";
          field.Type = TType.I16;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Job);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (BirthDate != null && __isset.BirthDate) {
          field.Name = "BirthDate";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BirthDate);
          oprot.WriteFieldEnd();
        }
        if (HomeTown != null && __isset.HomeTown) {
          field.Name = "HomeTown";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(HomeTown);
          oprot.WriteFieldEnd();
        }
        if (IDCard != null && __isset.IDCard) {
          field.Name = "IDCard";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IDCard);
          oprot.WriteFieldEnd();
        }
        if (Location != null && __isset.Location) {
          field.Name = "Location";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        if (College != null && __isset.College) {
          field.Name = "College";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(College);
          oprot.WriteFieldEnd();
        }
        if (QQ != null && __isset.QQ) {
          field.Name = "QQ";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(QQ);
          oprot.WriteFieldEnd();
        }
        if (WeChat != null && __isset.WeChat) {
          field.Name = "WeChat";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(WeChat);
          oprot.WriteFieldEnd();
        }
        if (RegistDate != null && __isset.RegistDate) {
          field.Name = "RegistDate";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegistDate);
          oprot.WriteFieldEnd();
        }
        if (Sign != null && __isset.Sign) {
          field.Name = "Sign";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sign);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PersonalInfo(");
      bool __first = true;
      if (__isset.Sex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sex: ");
        __sb.Append(Sex);
      }
      if (__isset.Nation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Nation: ");
        __sb.Append(Nation);
      }
      if (__isset.Education) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Education: ");
        __sb.Append(Education);
      }
      if (__isset.Job) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Job: ");
        __sb.Append(Job);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (BirthDate != null && __isset.BirthDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BirthDate: ");
        __sb.Append(BirthDate);
      }
      if (HomeTown != null && __isset.HomeTown) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HomeTown: ");
        __sb.Append(HomeTown);
      }
      if (IDCard != null && __isset.IDCard) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IDCard: ");
        __sb.Append(IDCard);
      }
      if (Location != null && __isset.Location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      if (College != null && __isset.College) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("College: ");
        __sb.Append(College);
      }
      if (QQ != null && __isset.QQ) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("QQ: ");
        __sb.Append(QQ);
      }
      if (WeChat != null && __isset.WeChat) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WeChat: ");
        __sb.Append(WeChat);
      }
      if (RegistDate != null && __isset.RegistDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegistDate: ");
        __sb.Append(RegistDate);
      }
      if (Sign != null && __isset.Sign) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sign: ");
        __sb.Append(Sign);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
