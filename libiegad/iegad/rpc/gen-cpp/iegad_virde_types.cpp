/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "iegad_virde_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace iegad { namespace virde {


fileInfo::~fileInfo() throw() {
}


void fileInfo::__set_type(const int16_t val) {
  this->type = val;
__isset.type = true;
}

void fileInfo::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void fileInfo::__set_fullName(const std::string& val) {
  this->fullName = val;
__isset.fullName = true;
}

void fileInfo::__set_creationTime(const int64_t val) {
  this->creationTime = val;
__isset.creationTime = true;
}

void fileInfo::__set_directory(const std::string& val) {
  this->directory = val;
__isset.directory = true;
}

void fileInfo::__set_directoryName(const std::string& val) {
  this->directoryName = val;
__isset.directoryName = true;
}

void fileInfo::__set_lastAccessTime(const int64_t val) {
  this->lastAccessTime = val;
__isset.lastAccessTime = true;
}

void fileInfo::__set_length(const int64_t val) {
  this->length = val;
__isset.length = true;
}

uint32_t fileInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullName);
          this->__isset.fullName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationTime);
          this->__isset.creationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->directory);
          this->__isset.directory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->directoryName);
          this->__isset.directoryName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastAccessTime);
          this->__isset.lastAccessTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t fileInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("fileInfo");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I16, 1);
    xfer += oprot->writeI16(this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fullName) {
    xfer += oprot->writeFieldBegin("fullName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->fullName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.creationTime) {
    xfer += oprot->writeFieldBegin("creationTime", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->creationTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.directory) {
    xfer += oprot->writeFieldBegin("directory", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->directory);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.directoryName) {
    xfer += oprot->writeFieldBegin("directoryName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->directoryName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastAccessTime) {
    xfer += oprot->writeFieldBegin("lastAccessTime", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->lastAccessTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.length) {
    xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->length);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(fileInfo &a, fileInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.name, b.name);
  swap(a.fullName, b.fullName);
  swap(a.creationTime, b.creationTime);
  swap(a.directory, b.directory);
  swap(a.directoryName, b.directoryName);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.length, b.length);
  swap(a.__isset, b.__isset);
}

fileInfo::fileInfo(const fileInfo& other0) {
  type = other0.type;
  name = other0.name;
  fullName = other0.fullName;
  creationTime = other0.creationTime;
  directory = other0.directory;
  directoryName = other0.directoryName;
  lastAccessTime = other0.lastAccessTime;
  length = other0.length;
  __isset = other0.__isset;
}
fileInfo& fileInfo::operator=(const fileInfo& other1) {
  type = other1.type;
  name = other1.name;
  fullName = other1.fullName;
  creationTime = other1.creationTime;
  directory = other1.directory;
  directoryName = other1.directoryName;
  lastAccessTime = other1.lastAccessTime;
  length = other1.length;
  __isset = other1.__isset;
  return *this;
}
void fileInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "fileInfo(";
  out << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "fullName="; (__isset.fullName ? (out << to_string(fullName)) : (out << "<null>"));
  out << ", " << "creationTime="; (__isset.creationTime ? (out << to_string(creationTime)) : (out << "<null>"));
  out << ", " << "directory="; (__isset.directory ? (out << to_string(directory)) : (out << "<null>"));
  out << ", " << "directoryName="; (__isset.directoryName ? (out << to_string(directoryName)) : (out << "<null>"));
  out << ", " << "lastAccessTime="; (__isset.lastAccessTime ? (out << to_string(lastAccessTime)) : (out << "<null>"));
  out << ", " << "length="; (__isset.length ? (out << to_string(length)) : (out << "<null>"));
  out << ")";
}

}} // namespace
