/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef iegad_virde_TYPES_H
#define iegad_virde_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace iegad { namespace virde {

class fileInfo;

typedef struct _fileInfo__isset {
  _fileInfo__isset() : type(false), name(false), fullName(false), creationTime(false), directory(false), directoryName(false), lastAccessTime(false), length(false) {}
  bool type :1;
  bool name :1;
  bool fullName :1;
  bool creationTime :1;
  bool directory :1;
  bool directoryName :1;
  bool lastAccessTime :1;
  bool length :1;
} _fileInfo__isset;

class fileInfo {
 public:

  fileInfo(const fileInfo&);
  fileInfo& operator=(const fileInfo&);
  fileInfo() : type(0), name(), fullName(), creationTime(0), directory(), directoryName(), lastAccessTime(0), length(0) {
  }

  virtual ~fileInfo() throw();
  int16_t type;
  std::string name;
  std::string fullName;
  int64_t creationTime;
  std::string directory;
  std::string directoryName;
  int64_t lastAccessTime;
  int64_t length;

  _fileInfo__isset __isset;

  void __set_type(const int16_t val);

  void __set_name(const std::string& val);

  void __set_fullName(const std::string& val);

  void __set_creationTime(const int64_t val);

  void __set_directory(const std::string& val);

  void __set_directoryName(const std::string& val);

  void __set_lastAccessTime(const int64_t val);

  void __set_length(const int64_t val);

  bool operator == (const fileInfo & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.fullName != rhs.__isset.fullName)
      return false;
    else if (__isset.fullName && !(fullName == rhs.fullName))
      return false;
    if (__isset.creationTime != rhs.__isset.creationTime)
      return false;
    else if (__isset.creationTime && !(creationTime == rhs.creationTime))
      return false;
    if (__isset.directory != rhs.__isset.directory)
      return false;
    else if (__isset.directory && !(directory == rhs.directory))
      return false;
    if (__isset.directoryName != rhs.__isset.directoryName)
      return false;
    else if (__isset.directoryName && !(directoryName == rhs.directoryName))
      return false;
    if (__isset.lastAccessTime != rhs.__isset.lastAccessTime)
      return false;
    else if (__isset.lastAccessTime && !(lastAccessTime == rhs.lastAccessTime))
      return false;
    if (__isset.length != rhs.__isset.length)
      return false;
    else if (__isset.length && !(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const fileInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fileInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(fileInfo &a, fileInfo &b);

inline std::ostream& operator<<(std::ostream& out, const fileInfo& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
