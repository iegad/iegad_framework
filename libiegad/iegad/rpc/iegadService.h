/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef iegadService_H
#define iegadService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "iegad_rpc_types.h"

namespace iegad { namespace rpc {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class iegadServiceIf {
 public:
  virtual ~iegadServiceIf() {}
  virtual void func(response& _return, const request& req) = 0;
  virtual void action(const request& req) = 0;
};

class iegadServiceIfFactory {
 public:
  typedef iegadServiceIf Handler;

  virtual ~iegadServiceIfFactory() {}

  virtual iegadServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(iegadServiceIf* /* handler */) = 0;
};

class iegadServiceIfSingletonFactory : virtual public iegadServiceIfFactory {
 public:
  iegadServiceIfSingletonFactory(const boost::shared_ptr<iegadServiceIf>& iface) : iface_(iface) {}
  virtual ~iegadServiceIfSingletonFactory() {}

  virtual iegadServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(iegadServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<iegadServiceIf> iface_;
};

class iegadServiceNull : virtual public iegadServiceIf {
 public:
  virtual ~iegadServiceNull() {}
  void func(response& /* _return */, const request& /* req */) {
    return;
  }
  void action(const request& /* req */) {
    return;
  }
};

typedef struct _iegadService_func_args__isset {
  _iegadService_func_args__isset() : req(false) {}
  bool req :1;
} _iegadService_func_args__isset;

class iegadService_func_args {
 public:

  iegadService_func_args(const iegadService_func_args&);
  iegadService_func_args& operator=(const iegadService_func_args&);
  iegadService_func_args() {
  }

  virtual ~iegadService_func_args() throw();
  request req;

  _iegadService_func_args__isset __isset;

  void __set_req(const request& val);

  bool operator == (const iegadService_func_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const iegadService_func_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const iegadService_func_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class iegadService_func_pargs {
 public:


  virtual ~iegadService_func_pargs() throw();
  const request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _iegadService_func_result__isset {
  _iegadService_func_result__isset() : success(false) {}
  bool success :1;
} _iegadService_func_result__isset;

class iegadService_func_result {
 public:

  iegadService_func_result(const iegadService_func_result&);
  iegadService_func_result& operator=(const iegadService_func_result&);
  iegadService_func_result() {
  }

  virtual ~iegadService_func_result() throw();
  response success;

  _iegadService_func_result__isset __isset;

  void __set_success(const response& val);

  bool operator == (const iegadService_func_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const iegadService_func_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const iegadService_func_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _iegadService_func_presult__isset {
  _iegadService_func_presult__isset() : success(false) {}
  bool success :1;
} _iegadService_func_presult__isset;

class iegadService_func_presult {
 public:


  virtual ~iegadService_func_presult() throw();
  response* success;

  _iegadService_func_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _iegadService_action_args__isset {
  _iegadService_action_args__isset() : req(false) {}
  bool req :1;
} _iegadService_action_args__isset;

class iegadService_action_args {
 public:

  iegadService_action_args(const iegadService_action_args&);
  iegadService_action_args& operator=(const iegadService_action_args&);
  iegadService_action_args() {
  }

  virtual ~iegadService_action_args() throw();
  request req;

  _iegadService_action_args__isset __isset;

  void __set_req(const request& val);

  bool operator == (const iegadService_action_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const iegadService_action_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const iegadService_action_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class iegadService_action_pargs {
 public:


  virtual ~iegadService_action_pargs() throw();
  const request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class iegadServiceClient : virtual public iegadServiceIf {
 public:
  iegadServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  iegadServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void func(response& _return, const request& req);
  void send_func(const request& req);
  void recv_func(response& _return);
  void action(const request& req);
  void send_action(const request& req);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class iegadServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<iegadServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (iegadServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_func(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  iegadServiceProcessor(boost::shared_ptr<iegadServiceIf> iface) :
    iface_(iface) {
    processMap_["func"] = &iegadServiceProcessor::process_func;
    processMap_["action"] = &iegadServiceProcessor::process_action;
  }

  virtual ~iegadServiceProcessor() {}
};

class iegadServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  iegadServiceProcessorFactory(const ::boost::shared_ptr< iegadServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< iegadServiceIfFactory > handlerFactory_;
};

class iegadServiceMultiface : virtual public iegadServiceIf {
 public:
  iegadServiceMultiface(std::vector<boost::shared_ptr<iegadServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~iegadServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<iegadServiceIf> > ifaces_;
  iegadServiceMultiface() {}
  void add(boost::shared_ptr<iegadServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void func(response& _return, const request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->func(_return, req);
    }
    ifaces_[i]->func(_return, req);
    return;
  }

  void action(const request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->action(req);
    }
    ifaces_[i]->action(req);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class iegadServiceConcurrentClient : virtual public iegadServiceIf {
 public:
  iegadServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  iegadServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void func(response& _return, const request& req);
  int32_t send_func(const request& req);
  void recv_func(response& _return, const int32_t seqid);
  void action(const request& req);
  void send_action(const request& req);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
