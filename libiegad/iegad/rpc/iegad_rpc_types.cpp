/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "iegad_rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace iegad { namespace rpc {


request::~request() throw() {
}


void request::__set_msg_type(const int32_t val) {
  this->msg_type = val;
__isset.msg_type = true;
}

void request::__set_msg_flag(const int32_t val) {
  this->msg_flag = val;
__isset.msg_flag = true;
}

void request::__set_msg_time(const int64_t val) {
  this->msg_time = val;
__isset.msg_time = true;
}

void request::__set_msg_data(const std::string& val) {
  this->msg_data = val;
__isset.msg_data = true;
}

uint32_t request::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->msg_type);
          this->__isset.msg_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->msg_flag);
          this->__isset.msg_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->msg_time);
          this->__isset.msg_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg_data);
          this->__isset.msg_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("request");

  if (this->__isset.msg_type) {
    xfer += oprot->writeFieldBegin("msg_type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->msg_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.msg_flag) {
    xfer += oprot->writeFieldBegin("msg_flag", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->msg_flag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.msg_time) {
    xfer += oprot->writeFieldBegin("msg_time", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->msg_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.msg_data) {
    xfer += oprot->writeFieldBegin("msg_data", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->msg_data);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(request &a, request &b) {
  using ::std::swap;
  swap(a.msg_type, b.msg_type);
  swap(a.msg_flag, b.msg_flag);
  swap(a.msg_time, b.msg_time);
  swap(a.msg_data, b.msg_data);
  swap(a.__isset, b.__isset);
}

request::request(const request& other0) {
  msg_type = other0.msg_type;
  msg_flag = other0.msg_flag;
  msg_time = other0.msg_time;
  msg_data = other0.msg_data;
  __isset = other0.__isset;
}
request& request::operator=(const request& other1) {
  msg_type = other1.msg_type;
  msg_flag = other1.msg_flag;
  msg_time = other1.msg_time;
  msg_data = other1.msg_data;
  __isset = other1.__isset;
  return *this;
}
void request::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "request(";
  out << "msg_type="; (__isset.msg_type ? (out << to_string(msg_type)) : (out << "<null>"));
  out << ", " << "msg_flag="; (__isset.msg_flag ? (out << to_string(msg_flag)) : (out << "<null>"));
  out << ", " << "msg_time="; (__isset.msg_time ? (out << to_string(msg_time)) : (out << "<null>"));
  out << ", " << "msg_data="; (__isset.msg_data ? (out << to_string(msg_data)) : (out << "<null>"));
  out << ")";
}

}} // namespace
