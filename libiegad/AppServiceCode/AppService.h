/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AppService_H
#define AppService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "AppService_types.h"

namespace onepc {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AppServiceIf {
 public:
  virtual ~AppServiceIf() {}
  virtual void SetUp(std::string& _return, const PSetUp& param) = 0;
  virtual bool UpdatePersonalInfo(const PUpdatePersonalInfo& param) = 0;
  virtual bool UpdatePassword(const PUpdatePassword& param) = 0;
  virtual int32_t FindPasswordWithEmail(const PFindPasswordWithEmail& param) = 0;
  virtual int32_t FindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber& param) = 0;
  virtual int32_t BeginBindPhoneNumber(const PBindPhoneNumber& param) = 0;
  virtual bool EndBindPhoneNumber(const PBindPhoneNumber& param) = 0;
  virtual void SetIn(RSetIn& _return, const PSetIn& param) = 0;
};

class AppServiceIfFactory {
 public:
  typedef AppServiceIf Handler;

  virtual ~AppServiceIfFactory() {}

  virtual AppServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AppServiceIf* /* handler */) = 0;
};

class AppServiceIfSingletonFactory : virtual public AppServiceIfFactory {
 public:
  AppServiceIfSingletonFactory(const boost::shared_ptr<AppServiceIf>& iface) : iface_(iface) {}
  virtual ~AppServiceIfSingletonFactory() {}

  virtual AppServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AppServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AppServiceIf> iface_;
};

class AppServiceNull : virtual public AppServiceIf {
 public:
  virtual ~AppServiceNull() {}
  void SetUp(std::string& /* _return */, const PSetUp& /* param */) {
    return;
  }
  bool UpdatePersonalInfo(const PUpdatePersonalInfo& /* param */) {
    bool _return = false;
    return _return;
  }
  bool UpdatePassword(const PUpdatePassword& /* param */) {
    bool _return = false;
    return _return;
  }
  int32_t FindPasswordWithEmail(const PFindPasswordWithEmail& /* param */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t FindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber& /* param */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t BeginBindPhoneNumber(const PBindPhoneNumber& /* param */) {
    int32_t _return = 0;
    return _return;
  }
  bool EndBindPhoneNumber(const PBindPhoneNumber& /* param */) {
    bool _return = false;
    return _return;
  }
  void SetIn(RSetIn& /* _return */, const PSetIn& /* param */) {
    return;
  }
};

typedef struct _AppService_SetUp_args__isset {
  _AppService_SetUp_args__isset() : param(false) {}
  bool param :1;
} _AppService_SetUp_args__isset;

class AppService_SetUp_args {
 public:

  AppService_SetUp_args(const AppService_SetUp_args&);
  AppService_SetUp_args& operator=(const AppService_SetUp_args&);
  AppService_SetUp_args() {
  }

  virtual ~AppService_SetUp_args() throw();
  PSetUp param;

  _AppService_SetUp_args__isset __isset;

  void __set_param(const PSetUp& val);

  bool operator == (const AppService_SetUp_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const AppService_SetUp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_SetUp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AppService_SetUp_pargs {
 public:


  virtual ~AppService_SetUp_pargs() throw();
  const PSetUp* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_SetUp_result__isset {
  _AppService_SetUp_result__isset() : success(false) {}
  bool success :1;
} _AppService_SetUp_result__isset;

class AppService_SetUp_result {
 public:

  AppService_SetUp_result(const AppService_SetUp_result&);
  AppService_SetUp_result& operator=(const AppService_SetUp_result&);
  AppService_SetUp_result() : success() {
  }

  virtual ~AppService_SetUp_result() throw();
  std::string success;

  _AppService_SetUp_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const AppService_SetUp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AppService_SetUp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_SetUp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_SetUp_presult__isset {
  _AppService_SetUp_presult__isset() : success(false) {}
  bool success :1;
} _AppService_SetUp_presult__isset;

class AppService_SetUp_presult {
 public:


  virtual ~AppService_SetUp_presult() throw();
  std::string* success;

  _AppService_SetUp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AppService_UpdatePersonalInfo_args__isset {
  _AppService_UpdatePersonalInfo_args__isset() : param(false) {}
  bool param :1;
} _AppService_UpdatePersonalInfo_args__isset;

class AppService_UpdatePersonalInfo_args {
 public:

  AppService_UpdatePersonalInfo_args(const AppService_UpdatePersonalInfo_args&);
  AppService_UpdatePersonalInfo_args& operator=(const AppService_UpdatePersonalInfo_args&);
  AppService_UpdatePersonalInfo_args() {
  }

  virtual ~AppService_UpdatePersonalInfo_args() throw();
  PUpdatePersonalInfo param;

  _AppService_UpdatePersonalInfo_args__isset __isset;

  void __set_param(const PUpdatePersonalInfo& val);

  bool operator == (const AppService_UpdatePersonalInfo_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const AppService_UpdatePersonalInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_UpdatePersonalInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AppService_UpdatePersonalInfo_pargs {
 public:


  virtual ~AppService_UpdatePersonalInfo_pargs() throw();
  const PUpdatePersonalInfo* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_UpdatePersonalInfo_result__isset {
  _AppService_UpdatePersonalInfo_result__isset() : success(false) {}
  bool success :1;
} _AppService_UpdatePersonalInfo_result__isset;

class AppService_UpdatePersonalInfo_result {
 public:

  AppService_UpdatePersonalInfo_result(const AppService_UpdatePersonalInfo_result&);
  AppService_UpdatePersonalInfo_result& operator=(const AppService_UpdatePersonalInfo_result&);
  AppService_UpdatePersonalInfo_result() : success(0) {
  }

  virtual ~AppService_UpdatePersonalInfo_result() throw();
  bool success;

  _AppService_UpdatePersonalInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AppService_UpdatePersonalInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AppService_UpdatePersonalInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_UpdatePersonalInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_UpdatePersonalInfo_presult__isset {
  _AppService_UpdatePersonalInfo_presult__isset() : success(false) {}
  bool success :1;
} _AppService_UpdatePersonalInfo_presult__isset;

class AppService_UpdatePersonalInfo_presult {
 public:


  virtual ~AppService_UpdatePersonalInfo_presult() throw();
  bool* success;

  _AppService_UpdatePersonalInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AppService_UpdatePassword_args__isset {
  _AppService_UpdatePassword_args__isset() : param(false) {}
  bool param :1;
} _AppService_UpdatePassword_args__isset;

class AppService_UpdatePassword_args {
 public:

  AppService_UpdatePassword_args(const AppService_UpdatePassword_args&);
  AppService_UpdatePassword_args& operator=(const AppService_UpdatePassword_args&);
  AppService_UpdatePassword_args() {
  }

  virtual ~AppService_UpdatePassword_args() throw();
  PUpdatePassword param;

  _AppService_UpdatePassword_args__isset __isset;

  void __set_param(const PUpdatePassword& val);

  bool operator == (const AppService_UpdatePassword_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const AppService_UpdatePassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_UpdatePassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AppService_UpdatePassword_pargs {
 public:


  virtual ~AppService_UpdatePassword_pargs() throw();
  const PUpdatePassword* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_UpdatePassword_result__isset {
  _AppService_UpdatePassword_result__isset() : success(false) {}
  bool success :1;
} _AppService_UpdatePassword_result__isset;

class AppService_UpdatePassword_result {
 public:

  AppService_UpdatePassword_result(const AppService_UpdatePassword_result&);
  AppService_UpdatePassword_result& operator=(const AppService_UpdatePassword_result&);
  AppService_UpdatePassword_result() : success(0) {
  }

  virtual ~AppService_UpdatePassword_result() throw();
  bool success;

  _AppService_UpdatePassword_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AppService_UpdatePassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AppService_UpdatePassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_UpdatePassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_UpdatePassword_presult__isset {
  _AppService_UpdatePassword_presult__isset() : success(false) {}
  bool success :1;
} _AppService_UpdatePassword_presult__isset;

class AppService_UpdatePassword_presult {
 public:


  virtual ~AppService_UpdatePassword_presult() throw();
  bool* success;

  _AppService_UpdatePassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AppService_FindPasswordWithEmail_args__isset {
  _AppService_FindPasswordWithEmail_args__isset() : param(false) {}
  bool param :1;
} _AppService_FindPasswordWithEmail_args__isset;

class AppService_FindPasswordWithEmail_args {
 public:

  AppService_FindPasswordWithEmail_args(const AppService_FindPasswordWithEmail_args&);
  AppService_FindPasswordWithEmail_args& operator=(const AppService_FindPasswordWithEmail_args&);
  AppService_FindPasswordWithEmail_args() {
  }

  virtual ~AppService_FindPasswordWithEmail_args() throw();
  PFindPasswordWithEmail param;

  _AppService_FindPasswordWithEmail_args__isset __isset;

  void __set_param(const PFindPasswordWithEmail& val);

  bool operator == (const AppService_FindPasswordWithEmail_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const AppService_FindPasswordWithEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_FindPasswordWithEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AppService_FindPasswordWithEmail_pargs {
 public:


  virtual ~AppService_FindPasswordWithEmail_pargs() throw();
  const PFindPasswordWithEmail* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_FindPasswordWithEmail_result__isset {
  _AppService_FindPasswordWithEmail_result__isset() : success(false) {}
  bool success :1;
} _AppService_FindPasswordWithEmail_result__isset;

class AppService_FindPasswordWithEmail_result {
 public:

  AppService_FindPasswordWithEmail_result(const AppService_FindPasswordWithEmail_result&);
  AppService_FindPasswordWithEmail_result& operator=(const AppService_FindPasswordWithEmail_result&);
  AppService_FindPasswordWithEmail_result() : success(0) {
  }

  virtual ~AppService_FindPasswordWithEmail_result() throw();
  int32_t success;

  _AppService_FindPasswordWithEmail_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const AppService_FindPasswordWithEmail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AppService_FindPasswordWithEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_FindPasswordWithEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_FindPasswordWithEmail_presult__isset {
  _AppService_FindPasswordWithEmail_presult__isset() : success(false) {}
  bool success :1;
} _AppService_FindPasswordWithEmail_presult__isset;

class AppService_FindPasswordWithEmail_presult {
 public:


  virtual ~AppService_FindPasswordWithEmail_presult() throw();
  int32_t* success;

  _AppService_FindPasswordWithEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AppService_FindPasswordWithPhoneNumber_args__isset {
  _AppService_FindPasswordWithPhoneNumber_args__isset() : param(false) {}
  bool param :1;
} _AppService_FindPasswordWithPhoneNumber_args__isset;

class AppService_FindPasswordWithPhoneNumber_args {
 public:

  AppService_FindPasswordWithPhoneNumber_args(const AppService_FindPasswordWithPhoneNumber_args&);
  AppService_FindPasswordWithPhoneNumber_args& operator=(const AppService_FindPasswordWithPhoneNumber_args&);
  AppService_FindPasswordWithPhoneNumber_args() {
  }

  virtual ~AppService_FindPasswordWithPhoneNumber_args() throw();
  PFindPasswordWithPhoneNumber param;

  _AppService_FindPasswordWithPhoneNumber_args__isset __isset;

  void __set_param(const PFindPasswordWithPhoneNumber& val);

  bool operator == (const AppService_FindPasswordWithPhoneNumber_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const AppService_FindPasswordWithPhoneNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_FindPasswordWithPhoneNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AppService_FindPasswordWithPhoneNumber_pargs {
 public:


  virtual ~AppService_FindPasswordWithPhoneNumber_pargs() throw();
  const PFindPasswordWithPhoneNumber* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_FindPasswordWithPhoneNumber_result__isset {
  _AppService_FindPasswordWithPhoneNumber_result__isset() : success(false) {}
  bool success :1;
} _AppService_FindPasswordWithPhoneNumber_result__isset;

class AppService_FindPasswordWithPhoneNumber_result {
 public:

  AppService_FindPasswordWithPhoneNumber_result(const AppService_FindPasswordWithPhoneNumber_result&);
  AppService_FindPasswordWithPhoneNumber_result& operator=(const AppService_FindPasswordWithPhoneNumber_result&);
  AppService_FindPasswordWithPhoneNumber_result() : success(0) {
  }

  virtual ~AppService_FindPasswordWithPhoneNumber_result() throw();
  int32_t success;

  _AppService_FindPasswordWithPhoneNumber_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const AppService_FindPasswordWithPhoneNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AppService_FindPasswordWithPhoneNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_FindPasswordWithPhoneNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_FindPasswordWithPhoneNumber_presult__isset {
  _AppService_FindPasswordWithPhoneNumber_presult__isset() : success(false) {}
  bool success :1;
} _AppService_FindPasswordWithPhoneNumber_presult__isset;

class AppService_FindPasswordWithPhoneNumber_presult {
 public:


  virtual ~AppService_FindPasswordWithPhoneNumber_presult() throw();
  int32_t* success;

  _AppService_FindPasswordWithPhoneNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AppService_BeginBindPhoneNumber_args__isset {
  _AppService_BeginBindPhoneNumber_args__isset() : param(false) {}
  bool param :1;
} _AppService_BeginBindPhoneNumber_args__isset;

class AppService_BeginBindPhoneNumber_args {
 public:

  AppService_BeginBindPhoneNumber_args(const AppService_BeginBindPhoneNumber_args&);
  AppService_BeginBindPhoneNumber_args& operator=(const AppService_BeginBindPhoneNumber_args&);
  AppService_BeginBindPhoneNumber_args() {
  }

  virtual ~AppService_BeginBindPhoneNumber_args() throw();
  PBindPhoneNumber param;

  _AppService_BeginBindPhoneNumber_args__isset __isset;

  void __set_param(const PBindPhoneNumber& val);

  bool operator == (const AppService_BeginBindPhoneNumber_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const AppService_BeginBindPhoneNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_BeginBindPhoneNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AppService_BeginBindPhoneNumber_pargs {
 public:


  virtual ~AppService_BeginBindPhoneNumber_pargs() throw();
  const PBindPhoneNumber* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_BeginBindPhoneNumber_result__isset {
  _AppService_BeginBindPhoneNumber_result__isset() : success(false) {}
  bool success :1;
} _AppService_BeginBindPhoneNumber_result__isset;

class AppService_BeginBindPhoneNumber_result {
 public:

  AppService_BeginBindPhoneNumber_result(const AppService_BeginBindPhoneNumber_result&);
  AppService_BeginBindPhoneNumber_result& operator=(const AppService_BeginBindPhoneNumber_result&);
  AppService_BeginBindPhoneNumber_result() : success(0) {
  }

  virtual ~AppService_BeginBindPhoneNumber_result() throw();
  int32_t success;

  _AppService_BeginBindPhoneNumber_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const AppService_BeginBindPhoneNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AppService_BeginBindPhoneNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_BeginBindPhoneNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_BeginBindPhoneNumber_presult__isset {
  _AppService_BeginBindPhoneNumber_presult__isset() : success(false) {}
  bool success :1;
} _AppService_BeginBindPhoneNumber_presult__isset;

class AppService_BeginBindPhoneNumber_presult {
 public:


  virtual ~AppService_BeginBindPhoneNumber_presult() throw();
  int32_t* success;

  _AppService_BeginBindPhoneNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AppService_EndBindPhoneNumber_args__isset {
  _AppService_EndBindPhoneNumber_args__isset() : param(false) {}
  bool param :1;
} _AppService_EndBindPhoneNumber_args__isset;

class AppService_EndBindPhoneNumber_args {
 public:

  AppService_EndBindPhoneNumber_args(const AppService_EndBindPhoneNumber_args&);
  AppService_EndBindPhoneNumber_args& operator=(const AppService_EndBindPhoneNumber_args&);
  AppService_EndBindPhoneNumber_args() {
  }

  virtual ~AppService_EndBindPhoneNumber_args() throw();
  PBindPhoneNumber param;

  _AppService_EndBindPhoneNumber_args__isset __isset;

  void __set_param(const PBindPhoneNumber& val);

  bool operator == (const AppService_EndBindPhoneNumber_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const AppService_EndBindPhoneNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_EndBindPhoneNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AppService_EndBindPhoneNumber_pargs {
 public:


  virtual ~AppService_EndBindPhoneNumber_pargs() throw();
  const PBindPhoneNumber* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_EndBindPhoneNumber_result__isset {
  _AppService_EndBindPhoneNumber_result__isset() : success(false) {}
  bool success :1;
} _AppService_EndBindPhoneNumber_result__isset;

class AppService_EndBindPhoneNumber_result {
 public:

  AppService_EndBindPhoneNumber_result(const AppService_EndBindPhoneNumber_result&);
  AppService_EndBindPhoneNumber_result& operator=(const AppService_EndBindPhoneNumber_result&);
  AppService_EndBindPhoneNumber_result() : success(0) {
  }

  virtual ~AppService_EndBindPhoneNumber_result() throw();
  bool success;

  _AppService_EndBindPhoneNumber_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AppService_EndBindPhoneNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AppService_EndBindPhoneNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_EndBindPhoneNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_EndBindPhoneNumber_presult__isset {
  _AppService_EndBindPhoneNumber_presult__isset() : success(false) {}
  bool success :1;
} _AppService_EndBindPhoneNumber_presult__isset;

class AppService_EndBindPhoneNumber_presult {
 public:


  virtual ~AppService_EndBindPhoneNumber_presult() throw();
  bool* success;

  _AppService_EndBindPhoneNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AppService_SetIn_args__isset {
  _AppService_SetIn_args__isset() : param(false) {}
  bool param :1;
} _AppService_SetIn_args__isset;

class AppService_SetIn_args {
 public:

  AppService_SetIn_args(const AppService_SetIn_args&);
  AppService_SetIn_args& operator=(const AppService_SetIn_args&);
  AppService_SetIn_args() {
  }

  virtual ~AppService_SetIn_args() throw();
  PSetIn param;

  _AppService_SetIn_args__isset __isset;

  void __set_param(const PSetIn& val);

  bool operator == (const AppService_SetIn_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const AppService_SetIn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_SetIn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AppService_SetIn_pargs {
 public:


  virtual ~AppService_SetIn_pargs() throw();
  const PSetIn* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_SetIn_result__isset {
  _AppService_SetIn_result__isset() : success(false) {}
  bool success :1;
} _AppService_SetIn_result__isset;

class AppService_SetIn_result {
 public:

  AppService_SetIn_result(const AppService_SetIn_result&);
  AppService_SetIn_result& operator=(const AppService_SetIn_result&);
  AppService_SetIn_result() {
  }

  virtual ~AppService_SetIn_result() throw();
  RSetIn success;

  _AppService_SetIn_result__isset __isset;

  void __set_success(const RSetIn& val);

  bool operator == (const AppService_SetIn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AppService_SetIn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppService_SetIn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AppService_SetIn_presult__isset {
  _AppService_SetIn_presult__isset() : success(false) {}
  bool success :1;
} _AppService_SetIn_presult__isset;

class AppService_SetIn_presult {
 public:


  virtual ~AppService_SetIn_presult() throw();
  RSetIn* success;

  _AppService_SetIn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AppServiceClient : virtual public AppServiceIf {
 public:
  AppServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AppServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SetUp(std::string& _return, const PSetUp& param);
  void send_SetUp(const PSetUp& param);
  void recv_SetUp(std::string& _return);
  bool UpdatePersonalInfo(const PUpdatePersonalInfo& param);
  void send_UpdatePersonalInfo(const PUpdatePersonalInfo& param);
  bool recv_UpdatePersonalInfo();
  bool UpdatePassword(const PUpdatePassword& param);
  void send_UpdatePassword(const PUpdatePassword& param);
  bool recv_UpdatePassword();
  int32_t FindPasswordWithEmail(const PFindPasswordWithEmail& param);
  void send_FindPasswordWithEmail(const PFindPasswordWithEmail& param);
  int32_t recv_FindPasswordWithEmail();
  int32_t FindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber& param);
  void send_FindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber& param);
  int32_t recv_FindPasswordWithPhoneNumber();
  int32_t BeginBindPhoneNumber(const PBindPhoneNumber& param);
  void send_BeginBindPhoneNumber(const PBindPhoneNumber& param);
  int32_t recv_BeginBindPhoneNumber();
  bool EndBindPhoneNumber(const PBindPhoneNumber& param);
  void send_EndBindPhoneNumber(const PBindPhoneNumber& param);
  bool recv_EndBindPhoneNumber();
  void SetIn(RSetIn& _return, const PSetIn& param);
  void send_SetIn(const PSetIn& param);
  void recv_SetIn(RSetIn& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AppServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AppServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AppServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SetUp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdatePersonalInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdatePassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindPasswordWithEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindPasswordWithPhoneNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_BeginBindPhoneNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EndBindPhoneNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetIn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AppServiceProcessor(boost::shared_ptr<AppServiceIf> iface) :
    iface_(iface) {
    processMap_["SetUp"] = &AppServiceProcessor::process_SetUp;
    processMap_["UpdatePersonalInfo"] = &AppServiceProcessor::process_UpdatePersonalInfo;
    processMap_["UpdatePassword"] = &AppServiceProcessor::process_UpdatePassword;
    processMap_["FindPasswordWithEmail"] = &AppServiceProcessor::process_FindPasswordWithEmail;
    processMap_["FindPasswordWithPhoneNumber"] = &AppServiceProcessor::process_FindPasswordWithPhoneNumber;
    processMap_["BeginBindPhoneNumber"] = &AppServiceProcessor::process_BeginBindPhoneNumber;
    processMap_["EndBindPhoneNumber"] = &AppServiceProcessor::process_EndBindPhoneNumber;
    processMap_["SetIn"] = &AppServiceProcessor::process_SetIn;
  }

  virtual ~AppServiceProcessor() {}
};

class AppServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AppServiceProcessorFactory(const ::boost::shared_ptr< AppServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AppServiceIfFactory > handlerFactory_;
};

class AppServiceMultiface : virtual public AppServiceIf {
 public:
  AppServiceMultiface(std::vector<boost::shared_ptr<AppServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AppServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AppServiceIf> > ifaces_;
  AppServiceMultiface() {}
  void add(boost::shared_ptr<AppServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void SetUp(std::string& _return, const PSetUp& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetUp(_return, param);
    }
    ifaces_[i]->SetUp(_return, param);
    return;
  }

  bool UpdatePersonalInfo(const PUpdatePersonalInfo& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdatePersonalInfo(param);
    }
    return ifaces_[i]->UpdatePersonalInfo(param);
  }

  bool UpdatePassword(const PUpdatePassword& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdatePassword(param);
    }
    return ifaces_[i]->UpdatePassword(param);
  }

  int32_t FindPasswordWithEmail(const PFindPasswordWithEmail& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindPasswordWithEmail(param);
    }
    return ifaces_[i]->FindPasswordWithEmail(param);
  }

  int32_t FindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindPasswordWithPhoneNumber(param);
    }
    return ifaces_[i]->FindPasswordWithPhoneNumber(param);
  }

  int32_t BeginBindPhoneNumber(const PBindPhoneNumber& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->BeginBindPhoneNumber(param);
    }
    return ifaces_[i]->BeginBindPhoneNumber(param);
  }

  bool EndBindPhoneNumber(const PBindPhoneNumber& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EndBindPhoneNumber(param);
    }
    return ifaces_[i]->EndBindPhoneNumber(param);
  }

  void SetIn(RSetIn& _return, const PSetIn& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetIn(_return, param);
    }
    ifaces_[i]->SetIn(_return, param);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AppServiceConcurrentClient : virtual public AppServiceIf {
 public:
  AppServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AppServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SetUp(std::string& _return, const PSetUp& param);
  int32_t send_SetUp(const PSetUp& param);
  void recv_SetUp(std::string& _return, const int32_t seqid);
  bool UpdatePersonalInfo(const PUpdatePersonalInfo& param);
  int32_t send_UpdatePersonalInfo(const PUpdatePersonalInfo& param);
  bool recv_UpdatePersonalInfo(const int32_t seqid);
  bool UpdatePassword(const PUpdatePassword& param);
  int32_t send_UpdatePassword(const PUpdatePassword& param);
  bool recv_UpdatePassword(const int32_t seqid);
  int32_t FindPasswordWithEmail(const PFindPasswordWithEmail& param);
  int32_t send_FindPasswordWithEmail(const PFindPasswordWithEmail& param);
  int32_t recv_FindPasswordWithEmail(const int32_t seqid);
  int32_t FindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber& param);
  int32_t send_FindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber& param);
  int32_t recv_FindPasswordWithPhoneNumber(const int32_t seqid);
  int32_t BeginBindPhoneNumber(const PBindPhoneNumber& param);
  int32_t send_BeginBindPhoneNumber(const PBindPhoneNumber& param);
  int32_t recv_BeginBindPhoneNumber(const int32_t seqid);
  bool EndBindPhoneNumber(const PBindPhoneNumber& param);
  int32_t send_EndBindPhoneNumber(const PBindPhoneNumber& param);
  bool recv_EndBindPhoneNumber(const int32_t seqid);
  void SetIn(RSetIn& _return, const PSetIn& param);
  int32_t send_SetIn(const PSetIn& param);
  void recv_SetIn(RSetIn& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
