/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AppService_TYPES_H
#define AppService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace onepc {

class PSetUp;

class PUpdatePersonalInfo;

class PUpdatePassword;

class PFindPasswordWithEmail;

class PFindPasswordWithPhoneNumber;

class PBindPhoneNumber;

class PSetIn;

class RSetIn;

typedef struct _PSetUp__isset {
  _PSetUp__isset() : UsrID(false), Email(false), Password(false) {}
  bool UsrID :1;
  bool Email :1;
  bool Password :1;
} _PSetUp__isset;

class PSetUp {
 public:

  PSetUp(const PSetUp&);
  PSetUp& operator=(const PSetUp&);
  PSetUp() : UsrID(), Email(), Password() {
  }

  virtual ~PSetUp() throw();
  std::string UsrID;
  std::string Email;
  std::string Password;

  _PSetUp__isset __isset;

  void __set_UsrID(const std::string& val);

  void __set_Email(const std::string& val);

  void __set_Password(const std::string& val);

  bool operator == (const PSetUp & rhs) const
  {
    if (!(UsrID == rhs.UsrID))
      return false;
    if (!(Email == rhs.Email))
      return false;
    if (!(Password == rhs.Password))
      return false;
    return true;
  }
  bool operator != (const PSetUp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PSetUp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PSetUp &a, PSetUp &b);

inline std::ostream& operator<<(std::ostream& out, const PSetUp& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PUpdatePersonalInfo__isset {
  _PUpdatePersonalInfo__isset() : Sex(false), Nation(false), Education(false), Constellation(false), ShengXiao(false), Blood(false), LocalAddress(false), Job(false), Hometown(false), BirthDate(false), Name(false), Nick(false), College(false) {}
  bool Sex :1;
  bool Nation :1;
  bool Education :1;
  bool Constellation :1;
  bool ShengXiao :1;
  bool Blood :1;
  bool LocalAddress :1;
  bool Job :1;
  bool Hometown :1;
  bool BirthDate :1;
  bool Name :1;
  bool Nick :1;
  bool College :1;
} _PUpdatePersonalInfo__isset;

class PUpdatePersonalInfo {
 public:

  PUpdatePersonalInfo(const PUpdatePersonalInfo&);
  PUpdatePersonalInfo& operator=(const PUpdatePersonalInfo&);
  PUpdatePersonalInfo() : Sex(0), Nation(0), Education(0), Constellation(0), ShengXiao(0), Blood(0), LocalAddress(0), Job(0), Hometown(0), BirthDate(0), UsrID(), Name(), Nick(), College() {
  }

  virtual ~PUpdatePersonalInfo() throw();
  int8_t Sex;
  int8_t Nation;
  int8_t Education;
  int8_t Constellation;
  int8_t ShengXiao;
  int8_t Blood;
  int32_t LocalAddress;
  int32_t Job;
  int32_t Hometown;
  int64_t BirthDate;
  std::string UsrID;
  std::string Name;
  std::string Nick;
  std::string College;

  _PUpdatePersonalInfo__isset __isset;

  void __set_Sex(const int8_t val);

  void __set_Nation(const int8_t val);

  void __set_Education(const int8_t val);

  void __set_Constellation(const int8_t val);

  void __set_ShengXiao(const int8_t val);

  void __set_Blood(const int8_t val);

  void __set_LocalAddress(const int32_t val);

  void __set_Job(const int32_t val);

  void __set_Hometown(const int32_t val);

  void __set_BirthDate(const int64_t val);

  void __set_UsrID(const std::string& val);

  void __set_Name(const std::string& val);

  void __set_Nick(const std::string& val);

  void __set_College(const std::string& val);

  bool operator == (const PUpdatePersonalInfo & rhs) const
  {
    if (__isset.Sex != rhs.__isset.Sex)
      return false;
    else if (__isset.Sex && !(Sex == rhs.Sex))
      return false;
    if (__isset.Nation != rhs.__isset.Nation)
      return false;
    else if (__isset.Nation && !(Nation == rhs.Nation))
      return false;
    if (__isset.Education != rhs.__isset.Education)
      return false;
    else if (__isset.Education && !(Education == rhs.Education))
      return false;
    if (__isset.Constellation != rhs.__isset.Constellation)
      return false;
    else if (__isset.Constellation && !(Constellation == rhs.Constellation))
      return false;
    if (__isset.ShengXiao != rhs.__isset.ShengXiao)
      return false;
    else if (__isset.ShengXiao && !(ShengXiao == rhs.ShengXiao))
      return false;
    if (__isset.Blood != rhs.__isset.Blood)
      return false;
    else if (__isset.Blood && !(Blood == rhs.Blood))
      return false;
    if (__isset.LocalAddress != rhs.__isset.LocalAddress)
      return false;
    else if (__isset.LocalAddress && !(LocalAddress == rhs.LocalAddress))
      return false;
    if (__isset.Job != rhs.__isset.Job)
      return false;
    else if (__isset.Job && !(Job == rhs.Job))
      return false;
    if (__isset.Hometown != rhs.__isset.Hometown)
      return false;
    else if (__isset.Hometown && !(Hometown == rhs.Hometown))
      return false;
    if (__isset.BirthDate != rhs.__isset.BirthDate)
      return false;
    else if (__isset.BirthDate && !(BirthDate == rhs.BirthDate))
      return false;
    if (!(UsrID == rhs.UsrID))
      return false;
    if (__isset.Name != rhs.__isset.Name)
      return false;
    else if (__isset.Name && !(Name == rhs.Name))
      return false;
    if (__isset.Nick != rhs.__isset.Nick)
      return false;
    else if (__isset.Nick && !(Nick == rhs.Nick))
      return false;
    if (__isset.College != rhs.__isset.College)
      return false;
    else if (__isset.College && !(College == rhs.College))
      return false;
    return true;
  }
  bool operator != (const PUpdatePersonalInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PUpdatePersonalInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PUpdatePersonalInfo &a, PUpdatePersonalInfo &b);

inline std::ostream& operator<<(std::ostream& out, const PUpdatePersonalInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PUpdatePassword__isset {
  _PUpdatePassword__isset() : UsrID(false), OldPassword(false), NewPassword(false) {}
  bool UsrID :1;
  bool OldPassword :1;
  bool NewPassword :1;
} _PUpdatePassword__isset;

class PUpdatePassword {
 public:

  PUpdatePassword(const PUpdatePassword&);
  PUpdatePassword& operator=(const PUpdatePassword&);
  PUpdatePassword() : UsrID(), OldPassword(), NewPassword() {
  }

  virtual ~PUpdatePassword() throw();
  std::string UsrID;
  std::string OldPassword;
  std::string NewPassword;

  _PUpdatePassword__isset __isset;

  void __set_UsrID(const std::string& val);

  void __set_OldPassword(const std::string& val);

  void __set_NewPassword(const std::string& val);

  bool operator == (const PUpdatePassword & rhs) const
  {
    if (!(UsrID == rhs.UsrID))
      return false;
    if (!(OldPassword == rhs.OldPassword))
      return false;
    if (!(NewPassword == rhs.NewPassword))
      return false;
    return true;
  }
  bool operator != (const PUpdatePassword &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PUpdatePassword & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PUpdatePassword &a, PUpdatePassword &b);

inline std::ostream& operator<<(std::ostream& out, const PUpdatePassword& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PFindPasswordWithEmail__isset {
  _PFindPasswordWithEmail__isset() : InvalidCode(false), Email(false), Password(false) {}
  bool InvalidCode :1;
  bool Email :1;
  bool Password :1;
} _PFindPasswordWithEmail__isset;

class PFindPasswordWithEmail {
 public:

  PFindPasswordWithEmail(const PFindPasswordWithEmail&);
  PFindPasswordWithEmail& operator=(const PFindPasswordWithEmail&);
  PFindPasswordWithEmail() : InvalidCode(0), Email(), Password() {
  }

  virtual ~PFindPasswordWithEmail() throw();
  int32_t InvalidCode;
  std::string Email;
  std::string Password;

  _PFindPasswordWithEmail__isset __isset;

  void __set_InvalidCode(const int32_t val);

  void __set_Email(const std::string& val);

  void __set_Password(const std::string& val);

  bool operator == (const PFindPasswordWithEmail & rhs) const
  {
    if (!(InvalidCode == rhs.InvalidCode))
      return false;
    if (!(Email == rhs.Email))
      return false;
    if (!(Password == rhs.Password))
      return false;
    return true;
  }
  bool operator != (const PFindPasswordWithEmail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PFindPasswordWithEmail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PFindPasswordWithEmail &a, PFindPasswordWithEmail &b);

inline std::ostream& operator<<(std::ostream& out, const PFindPasswordWithEmail& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PFindPasswordWithPhoneNumber__isset {
  _PFindPasswordWithPhoneNumber__isset() : InvalidCode(false), PhoneNumber(false), Password(false) {}
  bool InvalidCode :1;
  bool PhoneNumber :1;
  bool Password :1;
} _PFindPasswordWithPhoneNumber__isset;

class PFindPasswordWithPhoneNumber {
 public:

  PFindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber&);
  PFindPasswordWithPhoneNumber& operator=(const PFindPasswordWithPhoneNumber&);
  PFindPasswordWithPhoneNumber() : InvalidCode(0), PhoneNumber(0), Password() {
  }

  virtual ~PFindPasswordWithPhoneNumber() throw();
  int32_t InvalidCode;
  int64_t PhoneNumber;
  std::string Password;

  _PFindPasswordWithPhoneNumber__isset __isset;

  void __set_InvalidCode(const int32_t val);

  void __set_PhoneNumber(const int64_t val);

  void __set_Password(const std::string& val);

  bool operator == (const PFindPasswordWithPhoneNumber & rhs) const
  {
    if (!(InvalidCode == rhs.InvalidCode))
      return false;
    if (!(PhoneNumber == rhs.PhoneNumber))
      return false;
    if (!(Password == rhs.Password))
      return false;
    return true;
  }
  bool operator != (const PFindPasswordWithPhoneNumber &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PFindPasswordWithPhoneNumber & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PFindPasswordWithPhoneNumber &a, PFindPasswordWithPhoneNumber &b);

inline std::ostream& operator<<(std::ostream& out, const PFindPasswordWithPhoneNumber& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PBindPhoneNumber__isset {
  _PBindPhoneNumber__isset() : InvalidCode(false), PhoneNumber(false), UsrID(false) {}
  bool InvalidCode :1;
  bool PhoneNumber :1;
  bool UsrID :1;
} _PBindPhoneNumber__isset;

class PBindPhoneNumber {
 public:

  PBindPhoneNumber(const PBindPhoneNumber&);
  PBindPhoneNumber& operator=(const PBindPhoneNumber&);
  PBindPhoneNumber() : InvalidCode(0), PhoneNumber(0), UsrID() {
  }

  virtual ~PBindPhoneNumber() throw();
  int32_t InvalidCode;
  int64_t PhoneNumber;
  std::string UsrID;

  _PBindPhoneNumber__isset __isset;

  void __set_InvalidCode(const int32_t val);

  void __set_PhoneNumber(const int64_t val);

  void __set_UsrID(const std::string& val);

  bool operator == (const PBindPhoneNumber & rhs) const
  {
    if (!(InvalidCode == rhs.InvalidCode))
      return false;
    if (!(PhoneNumber == rhs.PhoneNumber))
      return false;
    if (!(UsrID == rhs.UsrID))
      return false;
    return true;
  }
  bool operator != (const PBindPhoneNumber &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PBindPhoneNumber & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PBindPhoneNumber &a, PBindPhoneNumber &b);

inline std::ostream& operator<<(std::ostream& out, const PBindPhoneNumber& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PSetIn__isset {
  _PSetIn__isset() : PhoneNumber(false), Email(false) {}
  bool PhoneNumber :1;
  bool Email :1;
} _PSetIn__isset;

class PSetIn {
 public:

  PSetIn(const PSetIn&);
  PSetIn& operator=(const PSetIn&);
  PSetIn() : PhoneNumber(0), Email(), Password() {
  }

  virtual ~PSetIn() throw();
  int64_t PhoneNumber;
  std::string Email;
  std::string Password;

  _PSetIn__isset __isset;

  void __set_PhoneNumber(const int64_t val);

  void __set_Email(const std::string& val);

  void __set_Password(const std::string& val);

  bool operator == (const PSetIn & rhs) const
  {
    if (__isset.PhoneNumber != rhs.__isset.PhoneNumber)
      return false;
    else if (__isset.PhoneNumber && !(PhoneNumber == rhs.PhoneNumber))
      return false;
    if (__isset.Email != rhs.__isset.Email)
      return false;
    else if (__isset.Email && !(Email == rhs.Email))
      return false;
    if (!(Password == rhs.Password))
      return false;
    return true;
  }
  bool operator != (const PSetIn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PSetIn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PSetIn &a, PSetIn &b);

inline std::ostream& operator<<(std::ostream& out, const PSetIn& obj)
{
  obj.printTo(out);
  return out;
}


class RSetIn {
 public:

  RSetIn(const RSetIn&);
  RSetIn& operator=(const RSetIn&);
  RSetIn() : UsrID() {
  }

  virtual ~RSetIn() throw();
  std::string UsrID;

  void __set_UsrID(const std::string& val);

  bool operator == (const RSetIn & rhs) const
  {
    if (!(UsrID == rhs.UsrID))
      return false;
    return true;
  }
  bool operator != (const RSetIn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RSetIn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RSetIn &a, RSetIn &b);

inline std::ostream& operator<<(std::ostream& out, const RSetIn& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
