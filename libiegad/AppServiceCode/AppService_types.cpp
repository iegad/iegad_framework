/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AppService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace onepc {


PSetUp::~PSetUp() throw() {
}


void PSetUp::__set_UsrID(const std::string& val) {
  this->UsrID = val;
}

void PSetUp::__set_Email(const std::string& val) {
  this->Email = val;
}

void PSetUp::__set_Password(const std::string& val) {
  this->Password = val;
}

uint32_t PSetUp::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UsrID);
          this->__isset.UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Email);
          this->__isset.Email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Password);
          this->__isset.Password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PSetUp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PSetUp");

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Email", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PSetUp &a, PSetUp &b) {
  using ::std::swap;
  swap(a.UsrID, b.UsrID);
  swap(a.Email, b.Email);
  swap(a.Password, b.Password);
  swap(a.__isset, b.__isset);
}

PSetUp::PSetUp(const PSetUp& other0) {
  UsrID = other0.UsrID;
  Email = other0.Email;
  Password = other0.Password;
  __isset = other0.__isset;
}
PSetUp& PSetUp::operator=(const PSetUp& other1) {
  UsrID = other1.UsrID;
  Email = other1.Email;
  Password = other1.Password;
  __isset = other1.__isset;
  return *this;
}
void PSetUp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PSetUp(";
  out << "UsrID=" << to_string(UsrID);
  out << ", " << "Email=" << to_string(Email);
  out << ", " << "Password=" << to_string(Password);
  out << ")";
}


PUpdatePersonalInfo::~PUpdatePersonalInfo() throw() {
}


void PUpdatePersonalInfo::__set_Sex(const int8_t val) {
  this->Sex = val;
__isset.Sex = true;
}

void PUpdatePersonalInfo::__set_Nation(const int8_t val) {
  this->Nation = val;
__isset.Nation = true;
}

void PUpdatePersonalInfo::__set_Education(const int8_t val) {
  this->Education = val;
__isset.Education = true;
}

void PUpdatePersonalInfo::__set_Constellation(const int8_t val) {
  this->Constellation = val;
__isset.Constellation = true;
}

void PUpdatePersonalInfo::__set_ShengXiao(const int8_t val) {
  this->ShengXiao = val;
__isset.ShengXiao = true;
}

void PUpdatePersonalInfo::__set_Blood(const int8_t val) {
  this->Blood = val;
__isset.Blood = true;
}

void PUpdatePersonalInfo::__set_LocalAddress(const int32_t val) {
  this->LocalAddress = val;
__isset.LocalAddress = true;
}

void PUpdatePersonalInfo::__set_Job(const int32_t val) {
  this->Job = val;
__isset.Job = true;
}

void PUpdatePersonalInfo::__set_Hometown(const int32_t val) {
  this->Hometown = val;
__isset.Hometown = true;
}

void PUpdatePersonalInfo::__set_BirthDate(const int64_t val) {
  this->BirthDate = val;
__isset.BirthDate = true;
}

void PUpdatePersonalInfo::__set_UsrID(const std::string& val) {
  this->UsrID = val;
}

void PUpdatePersonalInfo::__set_Name(const std::string& val) {
  this->Name = val;
__isset.Name = true;
}

void PUpdatePersonalInfo::__set_Nick(const std::string& val) {
  this->Nick = val;
__isset.Nick = true;
}

void PUpdatePersonalInfo::__set_College(const std::string& val) {
  this->College = val;
__isset.College = true;
}

uint32_t PUpdatePersonalInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_UsrID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Sex);
          this->__isset.Sex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Nation);
          this->__isset.Nation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Education);
          this->__isset.Education = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Constellation);
          this->__isset.Constellation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->ShengXiao);
          this->__isset.ShengXiao = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Blood);
          this->__isset.Blood = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->LocalAddress);
          this->__isset.LocalAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Job);
          this->__isset.Job = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Hometown);
          this->__isset.Hometown = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->BirthDate);
          this->__isset.BirthDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UsrID);
          isset_UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Nick);
          this->__isset.Nick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->College);
          this->__isset.College = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_UsrID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PUpdatePersonalInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PUpdatePersonalInfo");

  if (this->__isset.Sex) {
    xfer += oprot->writeFieldBegin("Sex", ::apache::thrift::protocol::T_BYTE, 1);
    xfer += oprot->writeByte(this->Sex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Nation) {
    xfer += oprot->writeFieldBegin("Nation", ::apache::thrift::protocol::T_BYTE, 2);
    xfer += oprot->writeByte(this->Nation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Education) {
    xfer += oprot->writeFieldBegin("Education", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->Education);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Constellation) {
    xfer += oprot->writeFieldBegin("Constellation", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->Constellation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ShengXiao) {
    xfer += oprot->writeFieldBegin("ShengXiao", ::apache::thrift::protocol::T_BYTE, 5);
    xfer += oprot->writeByte(this->ShengXiao);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Blood) {
    xfer += oprot->writeFieldBegin("Blood", ::apache::thrift::protocol::T_BYTE, 6);
    xfer += oprot->writeByte(this->Blood);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.LocalAddress) {
    xfer += oprot->writeFieldBegin("LocalAddress", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->LocalAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Job) {
    xfer += oprot->writeFieldBegin("Job", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->Job);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Hometown) {
    xfer += oprot->writeFieldBegin("Hometown", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->Hometown);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.BirthDate) {
    xfer += oprot->writeFieldBegin("BirthDate", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->BirthDate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->UsrID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.Name) {
    xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->Name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Nick) {
    xfer += oprot->writeFieldBegin("Nick", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->Nick);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.College) {
    xfer += oprot->writeFieldBegin("College", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->College);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PUpdatePersonalInfo &a, PUpdatePersonalInfo &b) {
  using ::std::swap;
  swap(a.Sex, b.Sex);
  swap(a.Nation, b.Nation);
  swap(a.Education, b.Education);
  swap(a.Constellation, b.Constellation);
  swap(a.ShengXiao, b.ShengXiao);
  swap(a.Blood, b.Blood);
  swap(a.LocalAddress, b.LocalAddress);
  swap(a.Job, b.Job);
  swap(a.Hometown, b.Hometown);
  swap(a.BirthDate, b.BirthDate);
  swap(a.UsrID, b.UsrID);
  swap(a.Name, b.Name);
  swap(a.Nick, b.Nick);
  swap(a.College, b.College);
  swap(a.__isset, b.__isset);
}

PUpdatePersonalInfo::PUpdatePersonalInfo(const PUpdatePersonalInfo& other2) {
  Sex = other2.Sex;
  Nation = other2.Nation;
  Education = other2.Education;
  Constellation = other2.Constellation;
  ShengXiao = other2.ShengXiao;
  Blood = other2.Blood;
  LocalAddress = other2.LocalAddress;
  Job = other2.Job;
  Hometown = other2.Hometown;
  BirthDate = other2.BirthDate;
  UsrID = other2.UsrID;
  Name = other2.Name;
  Nick = other2.Nick;
  College = other2.College;
  __isset = other2.__isset;
}
PUpdatePersonalInfo& PUpdatePersonalInfo::operator=(const PUpdatePersonalInfo& other3) {
  Sex = other3.Sex;
  Nation = other3.Nation;
  Education = other3.Education;
  Constellation = other3.Constellation;
  ShengXiao = other3.ShengXiao;
  Blood = other3.Blood;
  LocalAddress = other3.LocalAddress;
  Job = other3.Job;
  Hometown = other3.Hometown;
  BirthDate = other3.BirthDate;
  UsrID = other3.UsrID;
  Name = other3.Name;
  Nick = other3.Nick;
  College = other3.College;
  __isset = other3.__isset;
  return *this;
}
void PUpdatePersonalInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PUpdatePersonalInfo(";
  out << "Sex="; (__isset.Sex ? (out << to_string(Sex)) : (out << "<null>"));
  out << ", " << "Nation="; (__isset.Nation ? (out << to_string(Nation)) : (out << "<null>"));
  out << ", " << "Education="; (__isset.Education ? (out << to_string(Education)) : (out << "<null>"));
  out << ", " << "Constellation="; (__isset.Constellation ? (out << to_string(Constellation)) : (out << "<null>"));
  out << ", " << "ShengXiao="; (__isset.ShengXiao ? (out << to_string(ShengXiao)) : (out << "<null>"));
  out << ", " << "Blood="; (__isset.Blood ? (out << to_string(Blood)) : (out << "<null>"));
  out << ", " << "LocalAddress="; (__isset.LocalAddress ? (out << to_string(LocalAddress)) : (out << "<null>"));
  out << ", " << "Job="; (__isset.Job ? (out << to_string(Job)) : (out << "<null>"));
  out << ", " << "Hometown="; (__isset.Hometown ? (out << to_string(Hometown)) : (out << "<null>"));
  out << ", " << "BirthDate="; (__isset.BirthDate ? (out << to_string(BirthDate)) : (out << "<null>"));
  out << ", " << "UsrID=" << to_string(UsrID);
  out << ", " << "Name="; (__isset.Name ? (out << to_string(Name)) : (out << "<null>"));
  out << ", " << "Nick="; (__isset.Nick ? (out << to_string(Nick)) : (out << "<null>"));
  out << ", " << "College="; (__isset.College ? (out << to_string(College)) : (out << "<null>"));
  out << ")";
}


PUpdatePassword::~PUpdatePassword() throw() {
}


void PUpdatePassword::__set_UsrID(const std::string& val) {
  this->UsrID = val;
}

void PUpdatePassword::__set_OldPassword(const std::string& val) {
  this->OldPassword = val;
}

void PUpdatePassword::__set_NewPassword(const std::string& val) {
  this->NewPassword = val;
}

uint32_t PUpdatePassword::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UsrID);
          this->__isset.UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->OldPassword);
          this->__isset.OldPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->NewPassword);
          this->__isset.NewPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PUpdatePassword::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PUpdatePassword");

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OldPassword", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->OldPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("NewPassword", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->NewPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PUpdatePassword &a, PUpdatePassword &b) {
  using ::std::swap;
  swap(a.UsrID, b.UsrID);
  swap(a.OldPassword, b.OldPassword);
  swap(a.NewPassword, b.NewPassword);
  swap(a.__isset, b.__isset);
}

PUpdatePassword::PUpdatePassword(const PUpdatePassword& other4) {
  UsrID = other4.UsrID;
  OldPassword = other4.OldPassword;
  NewPassword = other4.NewPassword;
  __isset = other4.__isset;
}
PUpdatePassword& PUpdatePassword::operator=(const PUpdatePassword& other5) {
  UsrID = other5.UsrID;
  OldPassword = other5.OldPassword;
  NewPassword = other5.NewPassword;
  __isset = other5.__isset;
  return *this;
}
void PUpdatePassword::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PUpdatePassword(";
  out << "UsrID=" << to_string(UsrID);
  out << ", " << "OldPassword=" << to_string(OldPassword);
  out << ", " << "NewPassword=" << to_string(NewPassword);
  out << ")";
}


PFindPasswordWithEmail::~PFindPasswordWithEmail() throw() {
}


void PFindPasswordWithEmail::__set_InvalidCode(const int32_t val) {
  this->InvalidCode = val;
}

void PFindPasswordWithEmail::__set_Email(const std::string& val) {
  this->Email = val;
}

void PFindPasswordWithEmail::__set_Password(const std::string& val) {
  this->Password = val;
}

uint32_t PFindPasswordWithEmail::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->InvalidCode);
          this->__isset.InvalidCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Email);
          this->__isset.Email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Password);
          this->__isset.Password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PFindPasswordWithEmail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PFindPasswordWithEmail");

  xfer += oprot->writeFieldBegin("InvalidCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->InvalidCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Email", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PFindPasswordWithEmail &a, PFindPasswordWithEmail &b) {
  using ::std::swap;
  swap(a.InvalidCode, b.InvalidCode);
  swap(a.Email, b.Email);
  swap(a.Password, b.Password);
  swap(a.__isset, b.__isset);
}

PFindPasswordWithEmail::PFindPasswordWithEmail(const PFindPasswordWithEmail& other6) {
  InvalidCode = other6.InvalidCode;
  Email = other6.Email;
  Password = other6.Password;
  __isset = other6.__isset;
}
PFindPasswordWithEmail& PFindPasswordWithEmail::operator=(const PFindPasswordWithEmail& other7) {
  InvalidCode = other7.InvalidCode;
  Email = other7.Email;
  Password = other7.Password;
  __isset = other7.__isset;
  return *this;
}
void PFindPasswordWithEmail::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PFindPasswordWithEmail(";
  out << "InvalidCode=" << to_string(InvalidCode);
  out << ", " << "Email=" << to_string(Email);
  out << ", " << "Password=" << to_string(Password);
  out << ")";
}


PFindPasswordWithPhoneNumber::~PFindPasswordWithPhoneNumber() throw() {
}


void PFindPasswordWithPhoneNumber::__set_InvalidCode(const int32_t val) {
  this->InvalidCode = val;
}

void PFindPasswordWithPhoneNumber::__set_PhoneNumber(const int64_t val) {
  this->PhoneNumber = val;
}

void PFindPasswordWithPhoneNumber::__set_Password(const std::string& val) {
  this->Password = val;
}

uint32_t PFindPasswordWithPhoneNumber::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->InvalidCode);
          this->__isset.InvalidCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->PhoneNumber);
          this->__isset.PhoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Password);
          this->__isset.Password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PFindPasswordWithPhoneNumber::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PFindPasswordWithPhoneNumber");

  xfer += oprot->writeFieldBegin("InvalidCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->InvalidCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PhoneNumber", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->PhoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PFindPasswordWithPhoneNumber &a, PFindPasswordWithPhoneNumber &b) {
  using ::std::swap;
  swap(a.InvalidCode, b.InvalidCode);
  swap(a.PhoneNumber, b.PhoneNumber);
  swap(a.Password, b.Password);
  swap(a.__isset, b.__isset);
}

PFindPasswordWithPhoneNumber::PFindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber& other8) {
  InvalidCode = other8.InvalidCode;
  PhoneNumber = other8.PhoneNumber;
  Password = other8.Password;
  __isset = other8.__isset;
}
PFindPasswordWithPhoneNumber& PFindPasswordWithPhoneNumber::operator=(const PFindPasswordWithPhoneNumber& other9) {
  InvalidCode = other9.InvalidCode;
  PhoneNumber = other9.PhoneNumber;
  Password = other9.Password;
  __isset = other9.__isset;
  return *this;
}
void PFindPasswordWithPhoneNumber::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PFindPasswordWithPhoneNumber(";
  out << "InvalidCode=" << to_string(InvalidCode);
  out << ", " << "PhoneNumber=" << to_string(PhoneNumber);
  out << ", " << "Password=" << to_string(Password);
  out << ")";
}


PBindPhoneNumber::~PBindPhoneNumber() throw() {
}


void PBindPhoneNumber::__set_InvalidCode(const int32_t val) {
  this->InvalidCode = val;
}

void PBindPhoneNumber::__set_PhoneNumber(const int64_t val) {
  this->PhoneNumber = val;
}

void PBindPhoneNumber::__set_UsrID(const std::string& val) {
  this->UsrID = val;
}

uint32_t PBindPhoneNumber::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->InvalidCode);
          this->__isset.InvalidCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->PhoneNumber);
          this->__isset.PhoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UsrID);
          this->__isset.UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PBindPhoneNumber::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PBindPhoneNumber");

  xfer += oprot->writeFieldBegin("InvalidCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->InvalidCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PhoneNumber", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->PhoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PBindPhoneNumber &a, PBindPhoneNumber &b) {
  using ::std::swap;
  swap(a.InvalidCode, b.InvalidCode);
  swap(a.PhoneNumber, b.PhoneNumber);
  swap(a.UsrID, b.UsrID);
  swap(a.__isset, b.__isset);
}

PBindPhoneNumber::PBindPhoneNumber(const PBindPhoneNumber& other10) {
  InvalidCode = other10.InvalidCode;
  PhoneNumber = other10.PhoneNumber;
  UsrID = other10.UsrID;
  __isset = other10.__isset;
}
PBindPhoneNumber& PBindPhoneNumber::operator=(const PBindPhoneNumber& other11) {
  InvalidCode = other11.InvalidCode;
  PhoneNumber = other11.PhoneNumber;
  UsrID = other11.UsrID;
  __isset = other11.__isset;
  return *this;
}
void PBindPhoneNumber::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PBindPhoneNumber(";
  out << "InvalidCode=" << to_string(InvalidCode);
  out << ", " << "PhoneNumber=" << to_string(PhoneNumber);
  out << ", " << "UsrID=" << to_string(UsrID);
  out << ")";
}


PSetIn::~PSetIn() throw() {
}


void PSetIn::__set_PhoneNumber(const int64_t val) {
  this->PhoneNumber = val;
__isset.PhoneNumber = true;
}

void PSetIn::__set_Email(const std::string& val) {
  this->Email = val;
__isset.Email = true;
}

void PSetIn::__set_Password(const std::string& val) {
  this->Password = val;
}

uint32_t PSetIn::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Password = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->PhoneNumber);
          this->__isset.PhoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Email);
          this->__isset.Email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Password);
          isset_Password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Password)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PSetIn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PSetIn");

  if (this->__isset.PhoneNumber) {
    xfer += oprot->writeFieldBegin("PhoneNumber", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->PhoneNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Email) {
    xfer += oprot->writeFieldBegin("Email", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->Email);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("Password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PSetIn &a, PSetIn &b) {
  using ::std::swap;
  swap(a.PhoneNumber, b.PhoneNumber);
  swap(a.Email, b.Email);
  swap(a.Password, b.Password);
  swap(a.__isset, b.__isset);
}

PSetIn::PSetIn(const PSetIn& other12) {
  PhoneNumber = other12.PhoneNumber;
  Email = other12.Email;
  Password = other12.Password;
  __isset = other12.__isset;
}
PSetIn& PSetIn::operator=(const PSetIn& other13) {
  PhoneNumber = other13.PhoneNumber;
  Email = other13.Email;
  Password = other13.Password;
  __isset = other13.__isset;
  return *this;
}
void PSetIn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PSetIn(";
  out << "PhoneNumber="; (__isset.PhoneNumber ? (out << to_string(PhoneNumber)) : (out << "<null>"));
  out << ", " << "Email="; (__isset.Email ? (out << to_string(Email)) : (out << "<null>"));
  out << ", " << "Password=" << to_string(Password);
  out << ")";
}


RSetIn::~RSetIn() throw() {
}


void RSetIn::__set_UsrID(const std::string& val) {
  this->UsrID = val;
}

uint32_t RSetIn::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_UsrID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UsrID);
          isset_UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_UsrID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RSetIn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RSetIn");

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->UsrID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RSetIn &a, RSetIn &b) {
  using ::std::swap;
  swap(a.UsrID, b.UsrID);
}

RSetIn::RSetIn(const RSetIn& other14) {
  UsrID = other14.UsrID;
}
RSetIn& RSetIn::operator=(const RSetIn& other15) {
  UsrID = other15.UsrID;
  return *this;
}
void RSetIn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RSetIn(";
  out << "UsrID=" << to_string(UsrID);
  out << ")";
}

} // namespace
