#ifndef __APP_SERVICE_IMP__
#define __APP_SERVICE_IMP__


// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AppService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PlatformThreadFactory.h>
#include <thrift/server/TThreadPoolServer.h>
#include <boost/make_shared.hpp>


using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using boost::shared_ptr;

using namespace  ::onepc;

class AppServiceHandler : virtual public AppServiceIf {
 public:
  explicit AppServiceHandler(const std::string & redisConnString);

  void SetUp(std::string& _return, const PSetUp& param);
  bool UpdatePersonalInfo(const PUpdatePersonalInfo& param);
  bool UpdatePassword(const PUpdatePassword& param);
  int32_t FindPasswordWithEmail(const PFindPasswordWithEmail& param);
  int32_t FindPasswordWithPhoneNumber(const PFindPasswordWithPhoneNumber& param);
  int32_t BeginBindPhoneNumber(const PBindPhoneNumber& param);
  bool EndBindPhoneNumber(const PBindPhoneNumber& param);
  void SetIn(RSetIn& _return, const PSetIn& param);

private:
    const std::string redisConnString_;

  AppServiceHandler(const AppServiceHandler &);
  AppServiceHandler operator=(const AppServiceHandler &);

}; // class AppServiceHandler;


#endif // __APP_SERVICE_IMP__
