/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EchoServer_H
#define EchoServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "testing_types.h"

namespace test {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EchoServerIf {
 public:
  virtual ~EchoServerIf() {}
  virtual void echo(std::string& _return, const std::string& msg) = 0;
};

class EchoServerIfFactory {
 public:
  typedef EchoServerIf Handler;

  virtual ~EchoServerIfFactory() {}

  virtual EchoServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EchoServerIf* /* handler */) = 0;
};

class EchoServerIfSingletonFactory : virtual public EchoServerIfFactory {
 public:
  EchoServerIfSingletonFactory(const boost::shared_ptr<EchoServerIf>& iface) : iface_(iface) {}
  virtual ~EchoServerIfSingletonFactory() {}

  virtual EchoServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EchoServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<EchoServerIf> iface_;
};

class EchoServerNull : virtual public EchoServerIf {
 public:
  virtual ~EchoServerNull() {}
  void echo(std::string& /* _return */, const std::string& /* msg */) {
    return;
  }
};

typedef struct _EchoServer_echo_args__isset {
  _EchoServer_echo_args__isset() : msg(false) {}
  bool msg :1;
} _EchoServer_echo_args__isset;

class EchoServer_echo_args {
 public:

  EchoServer_echo_args(const EchoServer_echo_args&);
  EchoServer_echo_args& operator=(const EchoServer_echo_args&);
  EchoServer_echo_args() : msg() {
  }

  virtual ~EchoServer_echo_args() throw();
  std::string msg;

  _EchoServer_echo_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const EchoServer_echo_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const EchoServer_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoServer_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EchoServer_echo_pargs {
 public:


  virtual ~EchoServer_echo_pargs() throw();
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EchoServer_echo_result__isset {
  _EchoServer_echo_result__isset() : success(false) {}
  bool success :1;
} _EchoServer_echo_result__isset;

class EchoServer_echo_result {
 public:

  EchoServer_echo_result(const EchoServer_echo_result&);
  EchoServer_echo_result& operator=(const EchoServer_echo_result&);
  EchoServer_echo_result() : success() {
  }

  virtual ~EchoServer_echo_result() throw();
  std::string success;

  _EchoServer_echo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const EchoServer_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EchoServer_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoServer_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EchoServer_echo_presult__isset {
  _EchoServer_echo_presult__isset() : success(false) {}
  bool success :1;
} _EchoServer_echo_presult__isset;

class EchoServer_echo_presult {
 public:


  virtual ~EchoServer_echo_presult() throw();
  std::string* success;

  _EchoServer_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EchoServerClient : virtual public EchoServerIf {
 public:
  EchoServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EchoServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& msg);
  void send_echo(const std::string& msg);
  void recv_echo(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EchoServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<EchoServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EchoServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EchoServerProcessor(boost::shared_ptr<EchoServerIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &EchoServerProcessor::process_echo;
  }

  virtual ~EchoServerProcessor() {}
};

class EchoServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EchoServerProcessorFactory(const ::boost::shared_ptr< EchoServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EchoServerIfFactory > handlerFactory_;
};

class EchoServerMultiface : virtual public EchoServerIf {
 public:
  EchoServerMultiface(std::vector<boost::shared_ptr<EchoServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EchoServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EchoServerIf> > ifaces_;
  EchoServerMultiface() {}
  void add(boost::shared_ptr<EchoServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(std::string& _return, const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echo(_return, msg);
    }
    ifaces_[i]->echo(_return, msg);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EchoServerConcurrentClient : virtual public EchoServerIf {
 public:
  EchoServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EchoServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& msg);
  int32_t send_echo(const std::string& msg);
  void recv_echo(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
