// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.


#ifndef __TIMESERVER_SERVER__
#define __TIMESERVER_SERVER__

#include "TimeServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>


#include <chrono>
#include "string/iegad_string.hpp"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::test;

class TimeServerHandler : virtual public TimeServerIf {
 public:
  TimeServerHandler() {
    // Your initialization goes here
  }

  void get(std::string& _return) {
      std::time_t c = std::time(nullptr);
      std::tm * tn = std::localtime(&c);
     _return = iegad::string_ex::format("{0}-{1}-{2} {3}:{4}:{5}",
     { std::to_string(tn->tm_yday + 1900), std::to_string(tn->tm_mon + 1),
       std::to_string(tn->tm_mday), std::to_string(tn->tm_hour),
       std::to_string(tn->tm_min), std::to_string(tn->tm_sec) });
  }

};

#endif // __TIMESERVER_SERVER__
