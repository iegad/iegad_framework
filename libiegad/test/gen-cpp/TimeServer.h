/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TimeServer_H
#define TimeServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "testing_types.h"

namespace test {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TimeServerIf {
 public:
  virtual ~TimeServerIf() {}
  virtual void get(std::string& _return) = 0;
};

class TimeServerIfFactory {
 public:
  typedef TimeServerIf Handler;

  virtual ~TimeServerIfFactory() {}

  virtual TimeServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TimeServerIf* /* handler */) = 0;
};

class TimeServerIfSingletonFactory : virtual public TimeServerIfFactory {
 public:
  TimeServerIfSingletonFactory(const boost::shared_ptr<TimeServerIf>& iface) : iface_(iface) {}
  virtual ~TimeServerIfSingletonFactory() {}

  virtual TimeServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TimeServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<TimeServerIf> iface_;
};

class TimeServerNull : virtual public TimeServerIf {
 public:
  virtual ~TimeServerNull() {}
  void get(std::string& /* _return */) {
    return;
  }
};


class TimeServer_get_args {
 public:

  TimeServer_get_args(const TimeServer_get_args&);
  TimeServer_get_args& operator=(const TimeServer_get_args&);
  TimeServer_get_args() {
  }

  virtual ~TimeServer_get_args() throw();

  bool operator == (const TimeServer_get_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TimeServer_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimeServer_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TimeServer_get_pargs {
 public:


  virtual ~TimeServer_get_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TimeServer_get_result__isset {
  _TimeServer_get_result__isset() : success(false) {}
  bool success :1;
} _TimeServer_get_result__isset;

class TimeServer_get_result {
 public:

  TimeServer_get_result(const TimeServer_get_result&);
  TimeServer_get_result& operator=(const TimeServer_get_result&);
  TimeServer_get_result() : success() {
  }

  virtual ~TimeServer_get_result() throw();
  std::string success;

  _TimeServer_get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TimeServer_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TimeServer_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimeServer_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TimeServer_get_presult__isset {
  _TimeServer_get_presult__isset() : success(false) {}
  bool success :1;
} _TimeServer_get_presult__isset;

class TimeServer_get_presult {
 public:


  virtual ~TimeServer_get_presult() throw();
  std::string* success;

  _TimeServer_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TimeServerClient : virtual public TimeServerIf {
 public:
  TimeServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TimeServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return);
  void send_get();
  void recv_get(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TimeServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TimeServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TimeServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TimeServerProcessor(boost::shared_ptr<TimeServerIf> iface) :
    iface_(iface) {
    processMap_["get"] = &TimeServerProcessor::process_get;
  }

  virtual ~TimeServerProcessor() {}
};

class TimeServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TimeServerProcessorFactory(const ::boost::shared_ptr< TimeServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TimeServerIfFactory > handlerFactory_;
};

class TimeServerMultiface : virtual public TimeServerIf {
 public:
  TimeServerMultiface(std::vector<boost::shared_ptr<TimeServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TimeServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TimeServerIf> > ifaces_;
  TimeServerMultiface() {}
  void add(boost::shared_ptr<TimeServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return);
    }
    ifaces_[i]->get(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TimeServerConcurrentClient : virtual public TimeServerIf {
 public:
  TimeServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TimeServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return);
  int32_t send_get();
  void recv_get(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
