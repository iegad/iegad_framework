// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.


#ifndef __ASTROBOY_HANDLER__
#define __ASTROBOY_HANDLER__



// ============ 说明 ============
//
// @创建日期 : 2016-02-28
// @创建人 : iegad
//
// ============================
// @用途 : AtroboyHander 接口实现类
//
//  由thrift 生成的代码, 再加以修改.
//
//	1, 去掉 main函数
//	2, 修改 .cpp 为 .hpp
//     3, 添加命名空间
//     4, 添加一个 RPC接口对象 映射表
//     5, 引用 RPC接口 头文件 "../thrift_IElefunImp.h"
// ============================
//
// @修改记录:
// =======================================
//  日期                     修改人                                   修改说明
// =======================================



#include "Astroboy.h"
#include <unordered_map>
#include <memory>
#include "../thrift_IElefunImp.h"



namespace iegad {
namespace thrift_ex {


    class AstroboyHandler : virtual public AstroboyIf {
    public:
	typedef std::unordered_map<int32_t, std::shared_ptr<IElefunImp>> action_map_t;

	AstroboyHandler() {}

	static void SetActionMap(std::shared_ptr<action_map_t> actionMap) {
	    actionMap_ = actionMap;
	}

	virtual ~AstroboyHandler() {}

	virtual void Elefun(res_t& _return, const req_t& req_msg) override {
	    auto itor = actionMap_->find(req_msg.r_type);
	    if (itor != actionMap_->end()) {
		itor->second->Action(&_return, req_msg);
	    }
	    else {
		_return.r_type = -1;
		_return.r_errstr = "UNKOWN R_TYPE";
	    }
	}

    private:
	static std::shared_ptr<action_map_t> actionMap_;
    }; // class AstroboyHandler;

    __declspec(selectany) std::shared_ptr<AstroboyHandler::action_map_t> AstroboyHandler::actionMap_;


} // namespace thrift_ex;
} // namespace iegad;



#endif // __ASTROBOY_HANDLER__



