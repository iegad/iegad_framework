// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.


#ifndef __ASTROBOY_HANDLER__
#define __ASTROBOY_HANDLER__




#include "Astroboy.h"
#include <unordered_map>
#include <memory>
#include "../thrift_IElefunImp.h"


namespace iegad {
namespace thrift_ex {


    class AstroboyHandler : virtual public AstroboyIf {
    public:
	typedef std::unordered_map<int32_t, std::shared_ptr<IElefunImp>> action_map_t;

	AstroboyHandler() {}

	static void SetActionMap(std::shared_ptr<action_map_t> actionMap) {
	    actionMap_ = actionMap;
	}

	virtual ~AstroboyHandler() {}

	virtual void Elefun(res_t& _return, const req_t& req_msg) override {
	    auto itor = actionMap_->find(req_msg.r_type);
	    if (itor != actionMap_->end()) {
		itor->second->Action(&_return, req_msg);
	    }
	    else {
		_return.r_type = -1;
		_return.r_errstr = "UNKOWN R_TYPE";
	    }
	}

    private:
	static std::shared_ptr<action_map_t> actionMap_;
    }; // class AstroboyHandler;


} // namespace thrift_ex;
} // namespace iegad;



#endif // __ASTROBOY_HANDLER__



