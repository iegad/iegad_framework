/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Astroboy_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace iegad { namespace thrift_ex {


req_t::~req_t() throw() {
}


void req_t::__set_r_type(const int32_t val) {
  this->r_type = val;
}

void req_t::__set_r_size(const int32_t val) {
  this->r_size = val;
__isset.r_size = true;
}

void req_t::__set_r_ver(const std::string& val) {
  this->r_ver = val;
__isset.r_ver = true;
}

void req_t::__set_r_str(const std::string& val) {
  this->r_str = val;
__isset.r_str = true;
}

void req_t::__set_r_md5(const std::string& val) {
  this->r_md5 = val;
__isset.r_md5 = true;
}

void req_t::__set_r_sha1(const std::vector<int32_t> & val) {
  this->r_sha1 = val;
__isset.r_sha1 = true;
}

uint32_t req_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_r_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->r_type);
          isset_r_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->r_size);
          this->__isset.r_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->r_ver);
          this->__isset.r_ver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->r_str);
          this->__isset.r_str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->r_md5);
          this->__isset.r_md5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->r_sha1.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->r_sha1.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->r_sha1[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.r_sha1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_r_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t req_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("req_t");

  xfer += oprot->writeFieldBegin("r_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->r_type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.r_size) {
    xfer += oprot->writeFieldBegin("r_size", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->r_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.r_ver) {
    xfer += oprot->writeFieldBegin("r_ver", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->r_ver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.r_str) {
    xfer += oprot->writeFieldBegin("r_str", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->r_str);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.r_md5) {
    xfer += oprot->writeFieldBegin("r_md5", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->r_md5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.r_sha1) {
    xfer += oprot->writeFieldBegin("r_sha1", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->r_sha1.size()));
      std::vector<int32_t> ::const_iterator _iter5;
      for (_iter5 = this->r_sha1.begin(); _iter5 != this->r_sha1.end(); ++_iter5)
      {
        xfer += oprot->writeI32((*_iter5));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(req_t &a, req_t &b) {
  using ::std::swap;
  swap(a.r_type, b.r_type);
  swap(a.r_size, b.r_size);
  swap(a.r_ver, b.r_ver);
  swap(a.r_str, b.r_str);
  swap(a.r_md5, b.r_md5);
  swap(a.r_sha1, b.r_sha1);
  swap(a.__isset, b.__isset);
}

req_t::req_t(const req_t& other6) {
  r_type = other6.r_type;
  r_size = other6.r_size;
  r_ver = other6.r_ver;
  r_str = other6.r_str;
  r_md5 = other6.r_md5;
  r_sha1 = other6.r_sha1;
  __isset = other6.__isset;
}
req_t& req_t::operator=(const req_t& other7) {
  r_type = other7.r_type;
  r_size = other7.r_size;
  r_ver = other7.r_ver;
  r_str = other7.r_str;
  r_md5 = other7.r_md5;
  r_sha1 = other7.r_sha1;
  __isset = other7.__isset;
  return *this;
}
void req_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "req_t(";
  out << "r_type=" << to_string(r_type);
  out << ", " << "r_size="; (__isset.r_size ? (out << to_string(r_size)) : (out << "<null>"));
  out << ", " << "r_ver="; (__isset.r_ver ? (out << to_string(r_ver)) : (out << "<null>"));
  out << ", " << "r_str="; (__isset.r_str ? (out << to_string(r_str)) : (out << "<null>"));
  out << ", " << "r_md5="; (__isset.r_md5 ? (out << to_string(r_md5)) : (out << "<null>"));
  out << ", " << "r_sha1="; (__isset.r_sha1 ? (out << to_string(r_sha1)) : (out << "<null>"));
  out << ")";
}


res_t::~res_t() throw() {
}


void res_t::__set_r_type(const int32_t val) {
  this->r_type = val;
}

void res_t::__set_r_size(const int32_t val) {
  this->r_size = val;
__isset.r_size = true;
}

void res_t::__set_r_errcode(const int32_t val) {
  this->r_errcode = val;
__isset.r_errcode = true;
}

void res_t::__set_r_ver(const std::string& val) {
  this->r_ver = val;
__isset.r_ver = true;
}

void res_t::__set_r_str(const std::string& val) {
  this->r_str = val;
__isset.r_str = true;
}

void res_t::__set_r_errstr(const std::string& val) {
  this->r_errstr = val;
__isset.r_errstr = true;
}

uint32_t res_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_r_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->r_type);
          isset_r_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->r_size);
          this->__isset.r_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->r_errcode);
          this->__isset.r_errcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->r_ver);
          this->__isset.r_ver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->r_str);
          this->__isset.r_str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->r_errstr);
          this->__isset.r_errstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_r_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t res_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("res_t");

  xfer += oprot->writeFieldBegin("r_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->r_type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.r_size) {
    xfer += oprot->writeFieldBegin("r_size", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->r_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.r_errcode) {
    xfer += oprot->writeFieldBegin("r_errcode", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->r_errcode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.r_ver) {
    xfer += oprot->writeFieldBegin("r_ver", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->r_ver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.r_str) {
    xfer += oprot->writeFieldBegin("r_str", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->r_str);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.r_errstr) {
    xfer += oprot->writeFieldBegin("r_errstr", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->r_errstr);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(res_t &a, res_t &b) {
  using ::std::swap;
  swap(a.r_type, b.r_type);
  swap(a.r_size, b.r_size);
  swap(a.r_errcode, b.r_errcode);
  swap(a.r_ver, b.r_ver);
  swap(a.r_str, b.r_str);
  swap(a.r_errstr, b.r_errstr);
  swap(a.__isset, b.__isset);
}

res_t::res_t(const res_t& other8) {
  r_type = other8.r_type;
  r_size = other8.r_size;
  r_errcode = other8.r_errcode;
  r_ver = other8.r_ver;
  r_str = other8.r_str;
  r_errstr = other8.r_errstr;
  __isset = other8.__isset;
}
res_t& res_t::operator=(const res_t& other9) {
  r_type = other9.r_type;
  r_size = other9.r_size;
  r_errcode = other9.r_errcode;
  r_ver = other9.r_ver;
  r_str = other9.r_str;
  r_errstr = other9.r_errstr;
  __isset = other9.__isset;
  return *this;
}
void res_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "res_t(";
  out << "r_type=" << to_string(r_type);
  out << ", " << "r_size="; (__isset.r_size ? (out << to_string(r_size)) : (out << "<null>"));
  out << ", " << "r_errcode="; (__isset.r_errcode ? (out << to_string(r_errcode)) : (out << "<null>"));
  out << ", " << "r_ver="; (__isset.r_ver ? (out << to_string(r_ver)) : (out << "<null>"));
  out << ", " << "r_str="; (__isset.r_str ? (out << to_string(r_str)) : (out << "<null>"));
  out << ", " << "r_errstr="; (__isset.r_errstr ? (out << to_string(r_errstr)) : (out << "<null>"));
  out << ")";
}

}} // namespace
