/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef person_TYPES_H
#define person_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace oa_system { namespace dbo {

class Person;

typedef struct _Person__isset {
  _Person__isset() : Age(true), Name(false) {}
  bool Age :1;
  bool Name :1;
} _Person__isset;

class Person {
 public:

  Person(const Person&);
  Person& operator=(const Person&);
  Person() : UsrID(0), Age(0), Name() {
  }

  virtual ~Person() throw();
  int32_t UsrID;
  int32_t Age;
  std::string Name;

  _Person__isset __isset;

  void __set_UsrID(const int32_t val);

  void __set_Age(const int32_t val);

  void __set_Name(const std::string& val);

  bool operator == (const Person & rhs) const
  {
    if (!(UsrID == rhs.UsrID))
      return false;
    if (__isset.Age != rhs.__isset.Age)
      return false;
    else if (__isset.Age && !(Age == rhs.Age))
      return false;
    if (__isset.Name != rhs.__isset.Name)
      return false;
    else if (__isset.Name && !(Name == rhs.Name))
      return false;
    return true;
  }
  bool operator != (const Person &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Person & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Person &a, Person &b);

inline std::ostream& operator<<(std::ostream& out, const Person& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
