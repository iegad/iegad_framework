/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "person_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace oa_system { namespace dbo {


Person::~Person() throw() {
}


void Person::__set_UsrID(const int32_t val) {
  this->UsrID = val;
}

void Person::__set_Age(const int32_t val) {
  this->Age = val;
__isset.Age = true;
}

void Person::__set_Name(const std::string& val) {
  this->Name = val;
__isset.Name = true;
}

uint32_t Person::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_UsrID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->UsrID);
          isset_UsrID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Age);
          this->__isset.Age = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_UsrID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Person::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Person");

  xfer += oprot->writeFieldBegin("UsrID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->UsrID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.Age) {
    xfer += oprot->writeFieldBegin("Age", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->Age);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Name) {
    xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->Name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Person &a, Person &b) {
  using ::std::swap;
  swap(a.UsrID, b.UsrID);
  swap(a.Age, b.Age);
  swap(a.Name, b.Name);
  swap(a.__isset, b.__isset);
}

Person::Person(const Person& other0) {
  UsrID = other0.UsrID;
  Age = other0.Age;
  Name = other0.Name;
  __isset = other0.__isset;
}
Person& Person::operator=(const Person& other1) {
  UsrID = other1.UsrID;
  Age = other1.Age;
  Name = other1.Name;
  __isset = other1.__isset;
  return *this;
}
void Person::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Person(";
  out << "UsrID=" << to_string(UsrID);
  out << ", " << "Age="; (__isset.Age ? (out << to_string(Age)) : (out << "<null>"));
  out << ", " << "Name="; (__isset.Name ? (out << to_string(Name)) : (out << "<null>"));
  out << ")";
}

}} // namespace
